{"version":3,"sources":["useAsyncCallback.js"],"names":["useAsyncCallback","fn","deps","initialState","reloadable","changed","setChanged","lastCallId","isMounted","state","setState","init","progress","loading","reload","prev","applyChange","payload","prevState","concat","callback","args","callId","current","error","undefined","then","value","catch"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,gBAAT,CAA0BC,EAA1B,EAA8BC,IAA9B,EAAoCC,YAApC,EAAkDC,UAAlD,EAA8D;AACzE,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwB,qBAAS,KAAT,CAA9B;AACA,QAAMC,UAAU,GAAG,mBAAO,CAAP,CAAnB;AACA,QAAMC,SAAS,GAAG,iCAAlB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB,qBAAS,MAAM;AACrC,UAAMC,IAAI,GAAG;AAAEC,MAAAA,QAAQ,EAAE,CAAZ;AAAeC,MAAAA,OAAO,EAAE,KAAxB;AAA+B,SAAGV;AAAlC,KAAb;;AACA,QAAIC,UAAJ,EAAgB;AACZO,MAAAA,IAAI,CAACG,MAAL,GAAc,MAAMR,UAAU,CAAES,IAAD,IAAU,CAACA,IAAZ,CAA9B;AACH;;AACD,WAAOJ,IAAP;AACH,GANyB,CAA1B;AAOA,QAAMK,WAAW,GAAG,wBACfC,OAAD,IAAa;AACTP,IAAAA,QAAQ,CAAEQ,SAAD,KAAgB,EAAE,GAAGA,SAAL;AAAgB,SAAGD;AAAnB,KAAhB,CAAD,CAAR;AACH,GAHe,EAIhB,CAACP,QAAD,CAJgB,CAApB;;AAOA,MAAIN,UAAJ,EAAgB;AACZF,IAAAA,IAAI,GAAGA,IAAI,CAACiB,MAAL,CAAYd,OAAZ,CAAP;AACH;;AAED,QAAMe,QAAQ,GAAG,wBACb,CAAC,GAAGC,IAAJ,KAAa;AACT,UAAMC,MAAM,GAAG,EAAEf,UAAU,CAACgB,OAA5B;AACAb,IAAAA,QAAQ,CAAEQ,SAAD,KAAgB,EACrB,GAAGA,SADkB;AAErBN,MAAAA,QAAQ,EAAE,CAFW;AAGrBC,MAAAA,OAAO,EAAE,IAHY;AAIrBW,MAAAA,KAAK,EAAEC;AAJc,KAAhB,CAAD,CAAR;AAOAxB,IAAAA,EAAE,CAAC,GAAGoB,IAAJ,CAAF,CACKK,IADL,CACWC,KAAD,IAAW;AACbnB,MAAAA,SAAS,MACLc,MAAM,KAAKf,UAAU,CAACgB,OAD1B,IAEIb,QAAQ,CAAEQ,SAAD,KAAgB,EACrB,GAAGA,SADkB;AAErBS,QAAAA,KAFqB;AAGrBf,QAAAA,QAAQ,EAAE,GAHW;AAIrBC,QAAAA,OAAO,EAAE,KAJY;AAKrBW,QAAAA,KAAK,EAAEC;AALc,OAAhB,CAAD,CAFZ;AAUA,aAAOE,KAAP;AACH,KAbL,EAcKC,KAdL,CAcYJ,KAAD,IAAW;AACdhB,MAAAA,SAAS,MACLc,MAAM,KAAKf,UAAU,CAACgB,OAD1B,IAEIb,QAAQ,CAAEQ,SAAD,KAAgB,EACrB,GAAGA,SADkB;AAErBM,QAAAA,KAFqB;AAGrBX,QAAAA,OAAO,EAAE;AAHY,OAAhB,CAAD,CAFZ;AAQA,aAAOW,KAAP;AACH,KAxBL;AAyBH,GAnCY;AAoCb;AACAtB,EAAAA;AACA;AAtCa,GAAjB;AAyCA,SAAO,CAACO,KAAD,EAAQW,QAAR,EAAkBJ,WAAlB,CAAP;AACH","sourcesContent":["import { useCallback, useState, useRef } from 'react';\nimport useMountedChecker from './useMountedChecker';\n\n/**\n * React hook that returns state and a callback for an async function or a function that returns a promise. Just like an async version of useCallback.\n * @param {*} fn - Async function\n * @param {Array} deps\n * @param {boolean} [loadingState=false]\n */\nexport default function useAsyncCallback(fn, deps, initialState, reloadable) {\n    const [changed, setChanged] = useState(false);\n    const lastCallId = useRef(0);\n    const isMounted = useMountedChecker();\n    const [state, setState] = useState(() => {\n        const init = { progress: 0, loading: false, ...initialState };\n        if (reloadable) {\n            init.reload = () => setChanged((prev) => !prev);\n        }\n        return init;\n    });\n    const applyChange = useCallback(\n        (payload) => {\n            setState((prevState) => ({ ...prevState, ...payload }));\n        },\n        [setState]\n    );\n\n    if (reloadable) {\n        deps = deps.concat(changed);\n    }\n\n    const callback = useCallback(\n        (...args) => {\n            const callId = ++lastCallId.current;\n            setState((prevState) => ({\n                ...prevState,\n                progress: 0,\n                loading: true,\n                error: undefined,\n            }));\n\n            fn(...args)\n                .then((value) => {\n                    isMounted() &&\n                        callId === lastCallId.current &&\n                        setState((prevState) => ({\n                            ...prevState,\n                            value,\n                            progress: 100,\n                            loading: false,\n                            error: undefined,\n                        }));\n\n                    return value;\n                })\n                .catch((error) => {\n                    isMounted() &&\n                        callId === lastCallId.current &&\n                        setState((prevState) => ({\n                            ...prevState,\n                            error,\n                            loading: false,\n                        }));\n\n                    return error;\n                });\n        },\n        /* eslint-disable react-hooks/exhaustive-deps */\n        deps\n        /* eslint-enable react-hooks/exhaustive-deps */\n    );\n\n    return [state, callback, applyChange];\n}\n"]}