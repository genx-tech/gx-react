{"version":3,"sources":["useAsyncMemo.js"],"names":["useAsyncMemo","fn","deps","state","callback"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACe,SAASA,YAAT,CAAsBC,EAAtB,EAA0BC,IAA1B,EAAgC;AAC3C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB,+BAAiBH,EAAjB,EAAqBC,IAArB,EAA2B,IAA3B,CAA1B;AAEA,wBAAU,MAAM;AACZE,IAAAA,QAAQ;AACX,GAFD,EAEG,CAACA,QAAD,CAFH;AAIA,SAAOD,KAAP;AACH","sourcesContent":["import { useEffect } from 'react';\nimport useAsyncCallback from './useAsyncCallback';\n\n/**\n * React hook that returns a state with shape { value, error, loading } of which the value is returned by an async function. Just like async version of useMemo.\n * @param {*} fn\n * @param {*} deps\n */\nexport default function useAsyncMemo(fn, deps) {\n    const [state, callback] = useAsyncCallback(fn, deps, true);\n\n    useEffect(() => {\n        callback();\n    }, [callback]);\n\n    return state;\n}\n"]}