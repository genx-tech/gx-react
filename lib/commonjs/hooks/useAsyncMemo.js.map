{"version":3,"sources":["useAsyncMemo.js"],"names":["useAsyncMemo","fn","deps","reloadable","state","callback","loading"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACe,SAASA,YAAT,CAAsBC,EAAtB,EAA0BC,IAA1B,EAAgCC,UAAhC,EAA4C;AACvD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB,+BACtBJ,EADsB,EAEtBC,IAFsB,EAGtB;AAAEI,IAAAA,OAAO,EAAE;AAAX,GAHsB,EAItBH,UAJsB,CAA1B;AAOA,wBAAU,MAAM;AACZE,IAAAA,QAAQ;AACX,GAFD,EAEG,CAACA,QAAD,CAFH;AAIA,SAAOD,KAAP;AACH","sourcesContent":["import { useEffect } from 'react';\nimport useAsyncCallback from './useAsyncCallback';\n\n/**\n * React hook that returns a state with shape { value, error, loading } of which the value is returned by an async function. Just like async version of useMemo.\n * @param {*} fn\n * @param {*} deps\n */\nexport default function useAsyncMemo(fn, deps, reloadable) {\n    const [state, callback] = useAsyncCallback(\n        fn,\n        deps,\n        { loading: true },\n        reloadable\n    );\n\n    useEffect(() => {\n        callback();\n    }, [callback]);\n\n    return state;\n}\n"]}