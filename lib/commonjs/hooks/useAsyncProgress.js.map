{"version":3,"sources":["useAsyncProgress.js"],"names":["useAsyncProgress","fn","deps","state","callback","applyChange","setProgress","progress"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACe,SAASA,gBAAT,CAA0BC,EAA1B,EAA8BC,IAA9B,EAAoC;AAC/C,QAAM,CAACC,KAAD,EAAQC,QAAR,EAAkBC,WAAlB,IAAiC,+BAAiBJ,EAAjB,EAAqBC,IAArB,EAA2B,IAA3B,CAAvC;AACA,QAAMI,WAAW,GAAG,wBACfC,QAAD,IAAc;AACVF,IAAAA,WAAW,CAAC;AAAEE,MAAAA;AAAF,KAAD,CAAX;AACH,GAHe,EAIhB,CAACF,WAAD,CAJgB,CAApB;AAOA,wBAAU,MAAM;AACZD,IAAAA,QAAQ,CAACE,WAAD,CAAR;AACH,GAFD,EAEG,CAACF,QAAD,EAAWE,WAAX,CAFH;AAIA,SAAOH,KAAP;AACH","sourcesContent":["import { useCallback, useEffect } from 'react';\nimport useAsyncCallback from './useAsyncCallback';\n\n/**\n * React hook that returns a state with shape { value, error, loading } of which the value is returned by an async function. Just like async version of useMemo.\n * @param {*} fn\n * @param {*} deps\n */\nexport default function useAsyncProgress(fn, deps) {\n    const [state, callback, applyChange] = useAsyncCallback(fn, deps, true);\n    const setProgress = useCallback(\n        (progress) => {\n            applyChange({ progress });\n        },\n        [applyChange]\n    );\n\n    useEffect(() => {\n        callback(setProgress);\n    }, [callback, setProgress]);\n\n    return state;\n}\n"]}