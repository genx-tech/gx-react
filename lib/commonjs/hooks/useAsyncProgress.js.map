{"version":3,"sources":["useAsyncProgress.js"],"names":["useAsyncProgress","fn","deps","reloadable","state","callback","applyChange","loading","setProgress","progress"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACe,SAASA,gBAAT,CAA0BC,EAA1B,EAA8BC,IAA9B,EAAoCC,UAApC,EAAgD;AAC3D,QAAM,CAACC,KAAD,EAAQC,QAAR,EAAkBC,WAAlB,IAAiC,+BACnCL,EADmC,EAEnCC,IAFmC,EAGnC;AAAEK,IAAAA,OAAO,EAAE;AAAX,GAHmC,EAInCJ,UAJmC,CAAvC;AAMA,QAAMK,WAAW,GAAG,wBACfC,QAAD,IAAc;AACVH,IAAAA,WAAW,CAAC;AAAEG,MAAAA;AAAF,KAAD,CAAX;AACH,GAHe,EAIhB,CAACH,WAAD,CAJgB,CAApB;AAOA,wBAAU,MAAM;AACZD,IAAAA,QAAQ,CAACG,WAAD,CAAR;AACH,GAFD,EAEG,CAACH,QAAD,EAAWG,WAAX,CAFH;AAIA,SAAOJ,KAAP;AACH","sourcesContent":["import { useCallback, useEffect } from 'react';\nimport useAsyncCallback from './useAsyncCallback';\n\n/**\n * React hook that returns a state with shape { value, error, loading } of which the value is returned by an async function. Just like async version of useMemo.\n * @param {*} fn\n * @param {*} deps\n */\nexport default function useAsyncProgress(fn, deps, reloadable) {\n    const [state, callback, applyChange] = useAsyncCallback(\n        fn,\n        deps,\n        { loading: true },\n        reloadable\n    );\n    const setProgress = useCallback(\n        (progress) => {\n            applyChange({ progress });\n        },\n        [applyChange]\n    );\n\n    useEffect(() => {\n        callback(setProgress);\n    }, [callback, setProgress]);\n\n    return state;\n}\n"]}