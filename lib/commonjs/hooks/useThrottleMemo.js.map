{"version":3,"sources":["useThrottleMemo.js"],"names":["useThrottleMemo","fn","ms","args","state","setState","timeout","nextArgs","current","timeoutHandler","undefined","setTimeout","clearTimeout"],"mappings":";;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,eAAT,CAAyBC,EAAzB,EAA6BC,EAA7B,EAAiCC,IAAjC,EAAuC;AAClDD,EAAAA,EAAE,IAAI,IAAN,KAAeA,EAAE,GAAG,GAApB;AACAC,EAAAA,IAAI,IAAI,IAAR,KAAiBA,IAAI,GAAG,EAAxB;AAEA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB,qBAAS,IAAT,CAA1B;AAEA,MAAIC,OAAO,GAAG,oBAAd;AACA,MAAIC,QAAQ,GAAG,oBAAf;AAEA,wBACI,MAAM;AACF,QAAI,CAACD,OAAO,CAACE,OAAb,EAAsB;AAClBH,MAAAA,QAAQ,CAACJ,EAAE,CAAC,GAAGE,IAAJ,CAAH,CAAR;;AAEA,YAAMM,cAAc,GAAG,MAAM;AACzB,YAAIF,QAAQ,CAACC,OAAb,EAAsB;AAClBH,UAAAA,QAAQ,CAACJ,EAAE,CAAC,GAAGE,IAAJ,CAAH,CAAR;AACAI,UAAAA,QAAQ,CAACC,OAAT,GAAmBE,SAAnB;AACAJ,UAAAA,OAAO,CAACE,OAAR,GAAkBG,UAAU,CAACF,cAAD,EAAiBP,EAAjB,CAA5B;AACH,SAJD,MAIO;AACHI,UAAAA,OAAO,CAACE,OAAR,GAAkBE,SAAlB;AACH;AACJ,OARD;;AAUAJ,MAAAA,OAAO,CAACE,OAAR,GAAkBG,UAAU,CAACF,cAAD,EAAiBP,EAAjB,CAA5B;AACH,KAdD,MAcO;AACH;AACAK,MAAAA,QAAQ,CAACC,OAAT,GAAmBL,IAAnB;AACH;AACJ,GApBL;AAqBI;AACAA,EAAAA;AACA;AAvBJ;AA0BA,wBAAU,MAAM;AACZ,WAAO,MAAM;AACTG,MAAAA,OAAO,CAACE,OAAR,IAAmBI,YAAY,CAACN,OAAO,CAACE,OAAT,CAA/B;AACH,KAFD;AAGH,GAJD,EAIG,EAJH;AAMA,SAAOJ,KAAP;AACH","sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\n/**\n * React hook that throttles an function call.\n * @param {Function} fn\n * @param {integer} ms\n * @param {Array} args\n */\nexport default function useThrottleMemo(fn, ms, args) {\n    ms != null || (ms = 200);\n    args != null || (args = []);\n\n    const [state, setState] = useState(null);\n\n    var timeout = useRef();\n    var nextArgs = useRef();\n\n    useEffect(\n        () => {\n            if (!timeout.current) {\n                setState(fn(...args));\n\n                const timeoutHandler = () => {\n                    if (nextArgs.current) {\n                        setState(fn(...args));\n                        nextArgs.current = undefined;\n                        timeout.current = setTimeout(timeoutHandler, ms);\n                    } else {\n                        timeout.current = undefined;\n                    }\n                };\n\n                timeout.current = setTimeout(timeoutHandler, ms);\n            } else {\n                //waiting period\n                nextArgs.current = args;\n            }\n        },\n        /* eslint-disable react-hooks/exhaustive-deps */\n        args\n        /* eslint-enable react-hooks/exhaustive-deps */\n    );\n\n    useEffect(() => {\n        return () => {\n            timeout.current && clearTimeout(timeout.current);\n        };\n    }, []);\n\n    return state;\n}\n"]}