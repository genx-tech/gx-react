{"version":3,"sources":["Radio.js"],"names":["JVRadio","meta","inline","key","styles","store","label","name","inputProps","radioItems","rules","selectedValue","setSelectedValue","getValue","toggleValue","value","prev","setValue","readOnly","find","item","map","index"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;AAEe,SAASA,OAAT,CAAiB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,MAAR;AAAgBC,EAAAA,GAAhB;AAAqBC,EAAAA,MAArB;AAA6BC,EAAAA;AAA7B,CAAjB,EAAuD;AAAA;;AAClE,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA,UAAf;AAA2BC,IAAAA,UAA3B;AAAuCC,IAAAA;AAAvC,MAAiDT,IAAvD;AAEA,QAAM,CAACU,aAAD,EAAgBC,gBAAhB,IAAoC,qBAAS,MAC/CP,KAAK,CAACQ,QAAN,CAAeN,IAAf,CADsC,CAA1C;;AAIA,QAAMO,WAAW,GAAIC,KAAD,IAAW;AAC3BH,IAAAA,gBAAgB,CAAEI,IAAD,IAAWD,KAAK,KAAKC,IAAV,GAAiB,IAAjB,GAAwBD,KAApC,CAAhB;AACAV,IAAAA,KAAK,CAACY,QAAN,CAAeV,IAAf,EAAqBI,aAArB;AACH,GAHD;;AAKA,sBACI,6BAAC,qBAAD,QACKL,KAAK,iBAAI,6BAAC,oBAAD,QAAOA,KAAP,CADd,eAEI,6BAAC,qBAAD,QACKD,KAAK,CAACa,QAAN,gBACG,6BAAC,oBAAD,4BAEQT,UAAU,CAACU,IAAX,CACKC,IAAD,IAAUT,aAAa,KAAKS,IAAI,CAACL,KADrC,CAFR,qDAEQ,iBAEGT,KAJX,CADH,GASGG,UAAU,CAACY,GAAX,CAAe,CAACD,IAAD,EAAOE,KAAP,kBAAkB,6BAAC,qBAAD,qBAC7B,6BAAC,6BAAD;AACI,IAAA,GAAG,EAAEA,KADT;AAEI,IAAA,KAAK,EAAEF,IAAI,CAACd,KAFhB;AAGI,IAAA,OAAO,EAAEK,aAAa,KAAKS,IAAI,CAACL,KAHpC;AAII,IAAA,OAAO,EAAE,MAAMD,WAAW,CAACM,IAAI,CAACL,KAAN;AAJ9B,IAD6B,CAAjC,CAVR,CAFJ,CADJ;AAyBH","sourcesContent":["import React, { useState } from 'react';\nimport { Block, Text } from 'galio-framework';\nimport { CheckBox } from 'react-native-elements';\n\nexport default function JVRadio({ meta, inline, key, styles, store }) {\n    const { label, name, inputProps, radioItems, rules } = meta;\n\n    const [selectedValue, setSelectedValue] = useState(() =>\n        store.getValue(name)\n    );\n\n    const toggleValue = (value) => {\n        setSelectedValue((prev) => (value === prev ? null : value));\n        store.setValue(name, selectedValue);\n    };\n\n    return (\n        <Block>\n            {label && <Text>{label}</Text>}\n            <Block>\n                {store.readOnly ? (\n                    <Text>\n                        {\n                            radioItems.find(\n                                (item) => selectedValue === item.value\n                            )?.label\n                        }\n                    </Text>\n                ) : (\n                    radioItems.map((item, index) => (<Block>\n                        <CheckBox\n                            key={index}\n                            title={item.label}\n                            checked={selectedValue === item.value}\n                            onPress={() => toggleValue(item.value)}\n                        /></Block>\n                    ))\n                )}\n            </Block>\n        </Block>\n    );\n}\n"]}