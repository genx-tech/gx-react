{"version":3,"sources":["FaceRecognition.js"],"names":["checkIsAvailable_","available","biometryType","ReactNativeBiometrics","isSensorAvailable","FaceID","console","log","Biometrics","isBiometricKeyExist_","keysExist","biometricKeysExist","createKeys_","publicKey","createKeys","deleteKeys_","keysDeleted","deleteKeys","createSignature_","payload","success","signature","createSignature","promptMessage","defaultRecognitionProcess","onCreateKey","onVerifyKey","isAvailable","keyExist","error"],"mappings":";;;;;;;AAAA;;;;AAEA,MAAMA,iBAAiB,GAAG,YAAY;AAClC,QAAM;AACFC,IAAAA,SADE;AAEFC,IAAAA;AAFE,MAGF,MAAMC,+BAAsBC,iBAAtB,EAHV;;AAIA,MAAIH,SAAS,IAAIC,YAAY,KAAKC,+BAAsBE,MAAxD,EAAgE;AAC5DC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,WAAO,IAAP;AACH,GAHD,MAGO,IAAIN,SAAS,IAAIC,YAAY,KAAKC,+BAAsBK,UAAxD,EAAoE;AACvEF,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,WAAO,IAAP;AACH,GAHM,MAGA;AACH,WAAO,KAAP;AACH;AACJ,CAdD;;;;AAgBA,MAAME,oBAAoB,GAAG,YAAY;AACrC,QAAM;AAAEC,IAAAA;AAAF,MAAgB,MAAMP,+BAAsBQ,kBAAtB,EAA5B;AACA,SAAOD,SAAP;AACH,CAHD;;;;AAKA,MAAME,WAAW,GAAG,YAAY;AAC5B,QAAM;AAAEC,IAAAA;AAAF,MAAgB,MAAMV,+BAAsBW,UAAtB,CACxB,qBADwB,CAA5B;AAGA,SAAOD,SAAP;AACH,CALD;;;;AAMA,MAAME,WAAW,GAAG,YAAY;AAC5B,QAAM;AAAEC,IAAAA;AAAF,MAAkB,MAAMb,+BAAsBc,UAAtB,EAA9B;;AACA,MAAID,WAAJ,EAAiB;AACbV,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACH,GAFD,MAEO;AACHD,IAAAA,OAAO,CAACC,GAAR,CACI,4DADJ;AAGH;AACJ,CATD;;;;AAWA,MAAMW,gBAAgB,GAAG,MAAOC,OAAP,IAAmB;AACxC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAyB,MAAMlB,+BAAsBmB,eAAtB,CAAsC;AACvEC,IAAAA,aAAa,EAAE,SADwD;AAEvEJ,IAAAA,OAAO,EAAEA;AAF8D,GAAtC,CAArC;;AAIA,MAAIC,OAAJ,EAAa;AACT,WAAOC,SAAP;AACH,GAFD,MAEO;AACH,WAAO,KAAP;AACH;AACJ,CAVD;;;;AAYA,MAAMG,yBAAyB,GAAG,OAC9BC,WAD8B,EAE9BC,WAF8B,EAG9BP,OAAO,GAAG,MAHoB,KAI7B;AACD,MAAI;AACA,UAAMQ,WAAW,GAAG,MAAM3B,iBAAiB,EAA3C;;AACA,QAAI2B,WAAJ,EAAiB;AACb,YAAMC,QAAQ,GAAG,MAAMnB,oBAAoB,EAA3C;;AACA,UAAI,CAACmB,QAAL,EAAe;AACX,cAAMf,SAAS,GAAG,MAAMD,WAAW,EAAnC;AACA,cAAMa,WAAW,CAACZ,SAAD,CAAjB;AACH;;AACD,YAAMQ,SAAS,GAAG,MAAMH,gBAAgB,CAACC,OAAD,CAAxC;;AACA,UAAIE,SAAS,KAAK,KAAlB,EAAyB;AACrB,cAAMK,WAAW,CAACL,SAAD,CAAjB;AACH;AACJ;AACJ,GAbD,CAaE,OAAOQ,KAAP,EAAc;AACZvB,IAAAA,OAAO,CAACC,GAAR,CAAYsB,KAAZ;AACH;AACJ,CArBD","sourcesContent":["import ReactNativeBiometrics from 'react-native-biometrics';\n\nconst checkIsAvailable_ = async () => {\n    const {\n        available,\n        biometryType,\n    } = await ReactNativeBiometrics.isSensorAvailable();\n    if (available && biometryType === ReactNativeBiometrics.FaceID) {\n        console.log('FaceID is supported');\n        return true;\n    } else if (available && biometryType === ReactNativeBiometrics.Biometrics) {\n        console.log('Biometrics is supported');\n        return true;\n    } else {\n        return false;\n    }\n};\n\nconst isBiometricKeyExist_ = async () => {\n    const { keysExist } = await ReactNativeBiometrics.biometricKeysExist();\n    return keysExist;\n};\n\nconst createKeys_ = async () => {\n    const { publicKey } = await ReactNativeBiometrics.createKeys(\n        'Confirm fingerprint'\n    );\n    return publicKey;\n};\nconst deleteKeys_ = async () => {\n    const { keysDeleted } = await ReactNativeBiometrics.deleteKeys();\n    if (keysDeleted) {\n        console.log('Successful deletion');\n    } else {\n        console.log(\n            'Unsuccessful deletion because there were no keys to delete'\n        );\n    }\n};\n\nconst createSignature_ = async (payload) => {\n    const { success, signature } = await ReactNativeBiometrics.createSignature({\n        promptMessage: 'Sign in',\n        payload: payload,\n    });\n    if (success) {\n        return signature;\n    } else {\n        return false;\n    }\n};\n\nconst defaultRecognitionProcess = async (\n    onCreateKey,\n    onVerifyKey,\n    payload = 'salt'\n) => {\n    try {\n        const isAvailable = await checkIsAvailable_();\n        if (isAvailable) {\n            const keyExist = await isBiometricKeyExist_();\n            if (!keyExist) {\n                const publicKey = await createKeys_();\n                await onCreateKey(publicKey);\n            }\n            const signature = await createSignature_(payload);\n            if (signature !== false) {\n                await onVerifyKey(signature);\n            }\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport {\n    checkIsAvailable_,\n    isBiometricKeyExist_,\n    createSignature_,\n    createKeys_,\n    deleteKeys_,\n    defaultRecognitionProcess,\n};\n"]}