{"version":3,"sources":["FaceRecognition.js"],"names":["loginSave_","username","password","Keychain","setGenericPassword","accessible","ACCESSIBLE","WHEN_UNLOCKED","accessControl","ACCESS_CONTROL","BIOMETRY_ANY","console","log","getSupportedBiometryType_","biometryType","getSupportedBiometryType","isBiometryTypeSupported_","res","retrieveCredentials_","credentials","getGenericPassword","error"],"mappings":";;;;;;;AAAA;;;;;;AAEA,MAAMA,UAAU,GAAG,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAC7C,QAAMC,QAAQ,CAACC,kBAAT,CAA4BH,QAA5B,EAAsCC,QAAtC,EAAgD;AAClDG,IAAAA,UAAU,EAAEF,QAAQ,CAACG,UAAT,CAAoBC,aADkB;AAElDC,IAAAA,aAAa,EAAEL,QAAQ,CAACM,cAAT,CAAwBC;AAFW,GAAhD,CAAN;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACH,CAND;;;;AAQA,MAAMC,yBAAyB,GAAG,YAAY;AAC1C,QAAMC,YAAY,GAAG,MAAMX,QAAQ,CAACY,wBAAT,EAA3B;;AACA,UAAQD,YAAR;AACI,SAAK,SAAL;AACI;;AACJ,SAAK,QAAL;AACI;;AACJ,SAAK,aAAL;AACI;;AACJ,SAAK,MAAL;AACI;;AACJ,SAAK,MAAL;AACI;;AACJ;AACI;AAZR;;AAcA,SAAOA,YAAP;AACH,CAjBD;;;;AAmBA,MAAME,wBAAwB,GAAG,YAAY;AACzC,QAAMC,GAAG,GAAG,MAAM,SAAKJ,yBAAL,EAAlB;AACA,SAAOI,GAAG,KAAK,IAAf;AACH,CAHD;;;;AAKA,MAAMC,oBAAoB,GAAG,YAAY;AACrC,MAAI;AACA;AACA,UAAMC,WAAW,GAAG,MAAMhB,QAAQ,CAACiB,kBAAT,CAA4B;AAClDZ,MAAAA,aAAa,EAAEL,QAAQ,CAACM,cAAT,CAAwBC;AADW,KAA5B,CAA1B;;AAGA,QAAIS,WAAJ,EAAiB;AACb,aAAOA,WAAP;AACH,KAFD,MAEO;AACHR,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,aAAO,IAAP;AACH;AACJ,GAXD,CAWE,OAAOS,KAAP,EAAc;AACZV,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CS,KAA9C;AACH;AACJ,CAfD,C,CAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import * as Keychain from 'react-native-keychain';\n\nconst loginSave_ = async (username, password) => {\n    await Keychain.setGenericPassword(username, password, {\n        accessible: Keychain.ACCESSIBLE.WHEN_UNLOCKED,\n        accessControl: Keychain.ACCESS_CONTROL.BIOMETRY_ANY,\n    });\n    console.log('save to keychain');\n};\n\nconst getSupportedBiometryType_ = async () => {\n    const biometryType = await Keychain.getSupportedBiometryType();\n    switch (biometryType) {\n        case 'TouchID':\n            break;\n        case 'FaceID':\n            break;\n        case 'Fingerprint':\n            break;\n        case 'FACE':\n            break;\n        case 'IRIS':\n            break;\n        default:\n            break;\n    }\n    return biometryType;\n};\n\nconst isBiometryTypeSupported_ = async () => {\n    const res = await this.getSupportedBiometryType_();\n    return res !== null;\n};\n\nconst retrieveCredentials_ = async () => {\n    try {\n        // Retrieve the credentials\n        const credentials = await Keychain.getGenericPassword({\n            accessControl: Keychain.ACCESS_CONTROL.BIOMETRY_ANY,\n        });\n        if (credentials) {\n            return credentials;\n        } else {\n            console.log('No credentials stored');\n            return null;\n        }\n    } catch (error) {\n        console.log(\"Keychain couldn't be accessed!\", error);\n    }\n};\n\n// const checkIsAvailable_ = async () => {\n//     const {\n//         available,\n//         biometryType,\n//     } = await ReactNativeBiometrics.isSensorAvailable();\n//     if (available && biometryType === ReactNativeBiometrics.FaceID) {\n//         console.log('FaceID is supported');\n//         return true;\n//     } else if (available && biometryType === ReactNativeBiometrics.Biometrics) {\n//         console.log('Biometrics is supported');\n//         return true;\n//     } else {\n//         return false;\n//     }\n// };\n\n// const availableBiometrics_ = async () => {\n//     const {\n//         available,\n//         biometryType,\n//     } = await ReactNativeBiometrics.isSensorAvailable();\n//     let result = { type: undefined, available: false };\n//     if (available && biometryType === ReactNativeBiometrics.FaceID) {\n//         console.log('FaceID is supported');\n//         result.type = 'FaceId';\n//         result.available = true;\n//     } else if (available && biometryType === ReactNativeBiometrics.TouchID) {\n//         console.log('TouchID is supported');\n//         result.type = 'TouchId';\n//         result.available = true;\n//     } else if (available && biometryType === ReactNativeBiometrics.Biometrics) {\n//         console.log('Biometrics is supported');\n//         result.available = true;\n//     }\n//     return result;\n// };\n\n// const isBiometricKeyExist_ = async () => {\n//     const { keysExist } = await ReactNativeBiometrics.biometricKeysExist();\n//     return keysExist;\n// };\n\n// const createKeys_ = async () => {\n//     const { publicKey } = await ReactNativeBiometrics.createKeys(\n//         'Confirm fingerprint'\n//     );\n//     return publicKey;\n// };\n// const deleteKeys_ = async () => {\n//     const { keysDeleted } = await ReactNativeBiometrics.deleteKeys();\n//     if (keysDeleted) {\n//         console.log('Successful deletion');\n//     } else {\n//         console.log(\n//             'Unsuccessful deletion because there were no keys to delete'\n//         );\n//     }\n// };\n\n// const createSignature_ = async (payload) => {\n//     const {\n//         success,\n//         signature,\n//         error,\n//     } = await ReactNativeBiometrics.createSignature({\n//         promptMessage: 'Sign in',\n//         payload: payload,\n//     });\n//     if (success) {\n//         return signature;\n//     } else {\n//         return false;\n//     }\n// };\n\n// const defaultRecognitionProcess = async (\n//     onCreateKey,\n//     onVerifyKey,\n//     payload = 'salt'\n// ) => {\n//     try {\n//         const isAvailable = await checkIsAvailable_();\n//         if (isAvailable) {\n//             const keyExist = await isBiometricKeyExist_();\n//             if (!keyExist) {\n//                 const publicKey = await createKeys_();\n//                 await onCreateKey(publicKey);\n//             }\n//             const signature = await createSignature_(payload);\n//             if (signature !== false) {\n//                 await onVerifyKey(signature);\n//             }\n//         }\n//     } catch (error) {\n//         console.log(error);\n//     }\n// };\n\nexport {\n    // availableBiometrics_,\n    // isBiometricKeyExist_,\n    // createKeys_,\n    // deleteKeys_,\n    // createSignature_,\n    // defaultRecognitionProcess,\n    loginSave_,\n    getSupportedBiometryType_,\n    retrieveCredentials_,\n    isBiometryTypeSupported_,\n};\n"]}