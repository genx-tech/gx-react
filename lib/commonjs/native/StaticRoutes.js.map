{"version":3,"sources":["StaticRoutes.js"],"names":["stackNavigatorCreator","Runtime","useNativeStack","createNativeStackNavigator","createStackNavigator","Stack","Tab","TopTab","renderScreens","Screen","screens","map","node","i","nested","Navigator","mapOfNavigator","nestedOptions","screenProps","props","BottomTabNavigator","screenOptions","mapOfIcon","reduce","r","name","icon","route","tabBarIcon","StackNavigator","TopTabNavigator","bottomTab","stack","topTab","StaticRoutes","type"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;AAEA,IAAIA,qBAAJ;;AAEA,IAAIC,iBAAQC,cAAZ,EAA4B;AACxB;AACAF,EAAAA,qBAAqB,GAAGG,uCAAxB;AACH,CAHD,MAGO;AACHH,EAAAA,qBAAqB,GAAGI,2BAAxB;AACH;;AAED,MAAMC,KAAK,GAAGL,qBAAqB,EAAnC;AACA,MAAMM,GAAG,GAAG,2CAAZ;AACA,MAAMC,MAAM,GAAG,qDAAf;;AAEA,MAAMC,aAAa,GAAG,CAACC,MAAD,EAASC,OAAT,KAClBA,OAAO,CAACC,GAAR,CAAY,CAACC,IAAD,EAAOC,CAAP,KAAa;AACrB,MAAID,IAAI,CAACE,MAAT,EAAiB;AACb,UAAMC,SAAS,GAAGC,cAAc,CAACJ,IAAI,CAACE,MAAN,CAAhC;AACA,UAAM;AAAEG,MAAAA,aAAF;AAAiB,SAAGC;AAApB,QAAoCN,IAA1C;AACA,wBACI,6BAAC,MAAD;AAAQ,MAAA,GAAG,EAAEC;AAAb,OAAoBK,WAApB,GACMC,KAAD,iBAAW,6BAAC,SAAD,eAAeA,KAAf,EAA0BF,aAA1B,EADhB,CADJ;AAKH;;AAED,sBAAO,6BAAC,MAAD;AAAQ,IAAA,GAAG,EAAEJ;AAAb,KAAoBD,IAApB,EAAP;AACH,CAZD,CADJ;;AAeA,MAAMQ,kBAAkB,GAAG,CAAC;AAAEV,EAAAA,OAAF;AAAW,KAAGS;AAAd,CAAD,KAA2B;AAClD,QAAME,aAAa,GAAG,oBAAQ,MAAM;AAChC,UAAMC,SAAS,GAAGZ,OAAO,CAACa,MAAR,CACd,CAACC,CAAD,EAAIZ,IAAJ,MAAeY,CAAC,CAACZ,IAAI,CAACa,IAAN,CAAD,GAAeb,IAAI,CAACc,IAArB,EAA4BF,CAA1C,CADc,EAEd,EAFc,CAAlB;AAKA,WAAO,CAAC;AAAEG,MAAAA;AAAF,KAAD,MAAgB;AACnBC,MAAAA,UAAU,EAAEN,SAAS,CAACK,KAAK,CAACF,IAAP;AADF,KAAhB,CAAP;AAGH,GATqB,EASnB,CAACf,OAAD,CATmB,CAAtB;AAWA,sBACI,6BAAC,GAAD,CAAK,SAAL;AAAe,IAAA,aAAa,EAAEW;AAA9B,KAAiDF,KAAjD,GACKX,aAAa,CAACF,GAAG,CAACG,MAAL,EAAaC,OAAb,CADlB,CADJ;AAKH,CAjBD;;AAmBA,MAAMmB,cAAc,GAAG,CAAC;AAAEnB,EAAAA,OAAF;AAAW,KAAGS;AAAd,CAAD,KAA2B;AAC9C,sBACI,6BAAC,KAAD,CAAO,SAAP,EAAqBA,KAArB,EACKX,aAAa,CAACH,KAAK,CAACI,MAAP,EAAeC,OAAf,CADlB,CADJ;AAKH,CAND;;AAQA,MAAMoB,eAAe,GAAG,CAAC;AAAEpB,EAAAA,OAAF;AAAW,KAAGS;AAAd,CAAD,KAA2B;AAC/C,sBACI,6BAAC,MAAD,CAAQ,SAAR,EAAsBA,KAAtB,EACKX,aAAa,CAACD,MAAM,CAACE,MAAR,EAAgBC,OAAhB,CADlB,CADJ;AAKH,CAND;;AAQA,MAAMM,cAAc,GAAG;AACnBe,EAAAA,SAAS,EAAEX,kBADQ;AAEnBY,EAAAA,KAAK,EAAEH,cAFY;AAGnBI,EAAAA,MAAM,EAAEH;AAHW,CAAvB;;AAMA,MAAMI,YAAY,GAAG,CAAC;AAAEC,EAAAA,IAAI,GAAG,OAAT;AAAkB,KAAGhB;AAArB,CAAD,KAAkC;AACnD,QAAMJ,SAAS,GAAGC,cAAc,CAACmB,IAAD,CAAhC;AACA,sBAAO,6BAAC,SAAD,EAAehB,KAAf,CAAP;AACH,CAHD;;eAKee,Y","sourcesContent":["import React, { useMemo } from 'react';\nimport { enableScreens } from 'react-native-screens';\nimport { createNativeStackNavigator } from 'react-native-screens/native-stack';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\n\nimport Runtime from '../Runtime';\n\nlet stackNavigatorCreator;\n\nif (Runtime.useNativeStack) {\n    enableScreens();\n    stackNavigatorCreator = createNativeStackNavigator;\n} else {\n    stackNavigatorCreator = createStackNavigator;\n}\n\nconst Stack = stackNavigatorCreator();\nconst Tab = createBottomTabNavigator();\nconst TopTab = createMaterialTopTabNavigator();\n\nconst renderScreens = (Screen, screens) =>\n    screens.map((node, i) => {\n        if (node.nested) {\n            const Navigator = mapOfNavigator[node.nested];\n            const { nestedOptions, ...screenProps } = node;\n            return (\n                <Screen key={i} {...screenProps}>\n                    {(props) => <Navigator {...props} {...nestedOptions} />}\n                </Screen>\n            );\n        }\n\n        return <Screen key={i} {...node} />;\n    });\n\nconst BottomTabNavigator = ({ screens, ...props }) => {\n    const screenOptions = useMemo(() => {\n        const mapOfIcon = screens.reduce(\n            (r, node) => ((r[node.name] = node.icon), r),\n            {}\n        );\n\n        return ({ route }) => ({\n            tabBarIcon: mapOfIcon[route.name],\n        });\n    }, [screens]);\n\n    return (\n        <Tab.Navigator screenOptions={screenOptions} {...props}>\n            {renderScreens(Tab.Screen, screens)}\n        </Tab.Navigator>\n    );\n};\n\nconst StackNavigator = ({ screens, ...props }) => {\n    return (\n        <Stack.Navigator {...props}>\n            {renderScreens(Stack.Screen, screens)}\n        </Stack.Navigator>\n    );\n};\n\nconst TopTabNavigator = ({ screens, ...props }) => {\n    return (\n        <TopTab.Navigator {...props}>\n            {renderScreens(TopTab.Screen, screens)}\n        </TopTab.Navigator>\n    );\n};\n\nconst mapOfNavigator = {\n    bottomTab: BottomTabNavigator,\n    stack: StackNavigator,\n    topTab: TopTabNavigator,\n};\n\nconst StaticRoutes = ({ type = 'stack', ...props }) => {\n    const Navigator = mapOfNavigator[type];\n    return <Navigator {...props} />;\n};\n\nexport default StaticRoutes;\n"]}