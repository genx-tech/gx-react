{"version":3,"sources":["logger.js"],"names":["DEBUG","VERBOSE","INFO","WARNING","ERROR","logLevel","mapLogLevels","debug","verbose","info","warning","error","disable","getLogLevel","setLogLevel","level","makeLogger","logger","logInfoProducer","enabledLogLevel","args","Array","isArray","consoleLogger","console","log"],"mappings":";;;;;;AAAO,MAAMA,KAAK,GAAG,CAAd;;AACA,MAAMC,OAAO,GAAG,CAAhB;;AACA,MAAMC,IAAI,GAAG,CAAb;;AACA,MAAMC,OAAO,GAAG,CAAhB;;AACA,MAAMC,KAAK,GAAG,CAAd;;AAEP,IAAIC,QAAQ,GAAGH,IAAf;AAEA,MAAMI,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAEP,KADU;AAEjBQ,EAAAA,OAAO,EAAEP,OAFQ;AAGjBQ,EAAAA,IAAI,EAAEP,IAHW;AAIjBQ,EAAAA,OAAO,EAAEP,OAJQ;AAKjBQ,EAAAA,KAAK,EAAEP,KALU;AAMjBQ,EAAAA,OAAO,EAAER,KAAK,GAAG;AANA,CAArB;;AASO,MAAMS,WAAW,GAAG,MAAMR,QAA1B;;;;AAEA,MAAMS,WAAW,GAAIC,KAAD,IAAYV,QAAQ,GAAGC,YAAY,CAACS,KAAD,CAAvD;;;;AAEA,MAAMC,UAAU,GAAIC,MAAD,IAAY,CAACF,KAAD,EAAQG,eAAR,KAA4B;AAC9D,QAAMC,eAAe,GACjBb,YAAY,CAACS,KAAD,CAAZ,IAAuBV,QAAvB,GAAkCC,YAAY,CAACS,KAAD,CAA9C,GAAwD,CAD5D;;AAGA,MAAII,eAAJ,EAAqB;AACjB,QAAIC,IAAI,GAAGF,eAAe,EAA1B;AACAG,IAAAA,KAAK,CAACC,OAAN,CAAcF,IAAd,MAAwBA,IAAI,GAAG,CAACA,IAAD,CAA/B;AAEAH,IAAAA,MAAM,CAACE,eAAD,EAAkBC,IAAlB,CAAN;AACH;AACJ,CAVM;;;;AAYA,MAAMG,aAAa,GAAG,CAACR,KAAD,EAAQK,IAAR,KACzB,CAACL,KAAK,GAAGb,IAAR,GAAesB,OAAO,CAACb,KAAvB,GAA+Ba,OAAO,CAACC,GAAxC,aAAiDV,KAAjD,QAA2D,GAAGK,IAA9D,CADG","sourcesContent":["export const DEBUG = 1;\nexport const VERBOSE = 2;\nexport const INFO = 3;\nexport const WARNING = 4;\nexport const ERROR = 5;\n\nlet logLevel = INFO;\n\nconst mapLogLevels = {\n    debug: DEBUG,\n    verbose: VERBOSE,\n    info: INFO,\n    warning: WARNING,\n    error: ERROR,\n    disable: ERROR + 1,\n};\n\nexport const getLogLevel = () => logLevel;\n\nexport const setLogLevel = (level) => (logLevel = mapLogLevels[level]);\n\nexport const makeLogger = (logger) => (level, logInfoProducer) => {\n    const enabledLogLevel =\n        mapLogLevels[level] >= logLevel ? mapLogLevels[level] : 0;\n\n    if (enabledLogLevel) {\n        let args = logInfoProducer();\n        Array.isArray(args) || (args = [args]);\n\n        logger(enabledLogLevel, args);\n    }\n};\n\nexport const consoleLogger = (level, args) =>\n    (level > INFO ? console.error : console.log)(`[${level}]`, ...args);\n"]}