{"version":3,"sources":["Runtime.js"],"names":["applyScreenComposer","hoc","config","screenComposers","push","updateRuntime","addon","Object","assign","setupScreen","elScreen","reduce","r","jsRuntime","modulesRegistry","finalizeConfig","freeze","defaultStyleMode","useMobxProvider","localePathBuilder","locale","moduleName","import_","url","register","loadedModule","lazyLoad","notFoundFallbabck","suspenseFallbabck","log","consoleLogger","makeLogger","getLogLevel","setLogLevel","update","finalize"],"mappings":";;;;;;;AAAA;;AACA;;;;AAOO,MAAMA,mBAAmB,GAAIC,GAAD,IAASC,MAAM,CAACC,eAAP,CAAuBC,IAAvB,CAA4BH,GAA5B,CAArC;;;;AACA,MAAMI,aAAa,GAAIC,KAAD,IAAWC,MAAM,CAACC,MAAP,CAAcN,MAAd,EAAsBI,KAAtB,CAAjC;;;;AACA,MAAMG,WAAW,GAAIC,QAAD,IACvBR,MAAM,CAACC,eAAP,CAAuBQ,MAAvB,CAA8B,CAACC,CAAD,EAAIX,GAAJ,KAAaW,CAAC,GAAGX,GAAG,CAACS,QAAD,CAAlD,EAA+DA,QAA/D,CADG;;;AAGP,MAAMG,SAAS,GAAG,8BAAlB;AACA,MAAMC,eAAe,GAAG,EAAxB;;AAEA,MAAMC,cAAc,GAAG,MAAM;AACzB;AAEAR,EAAAA,MAAM,CAACS,MAAP,CAAcd,MAAd;AACH,CAJD;;AAMA,MAAMA,MAAM,GAAG;AACX;AACAW,EAAAA,SAFW;AAEA;AACXI,EAAAA,gBAAgB,EAAEJ,SAAS,KAAK,QAAd,GAAyB,OAAzB,GAAmC,KAH1C;AAIXK,EAAAA,eAAe,EAAE,KAJN;AAKXf,EAAAA,eAAe,EAAE,EALN;AAOX;AACAgB,EAAAA,iBAAiB,EAAE,CAACC,MAAD,EAASC,UAAT,6BACED,MADF,cACYC,UADZ,UARR;AAWX;AACAC,EAAAA,OAAO,EAAGC,GAAD,IAAST,eAAe,CAACS,GAAD,CAZtB;AAaXC,EAAAA,QAAQ,EAAE,CAACD,GAAD,EAAME,YAAN,KAAuB;AAC7BX,IAAAA,eAAe,CAACS,GAAD,CAAf,GAAuBE,YAAvB;AACH,GAfU;;AAgBX;AACJ;AACA;AACA;AACIC,EAAAA,QAAQ,EAAGH,GAAD,IAASrB,MAAM,CAACoB,OAAP,CAAeC,GAAf,KAAuBrB,MAAM,CAACyB,iBApBtC;AAqBXA,EAAAA,iBAAiB,EAAE,MAAM,IArBd;AAsBXC,EAAAA,iBAAiB,EAAE,MAAM,IAtBd;AAwBX;AACAC,EAAAA,GAAG,EAAE,wBAAWC,qBAAX,CAzBM;AA0BXC,EAAAA,UAAU,EAAVA,kBA1BW;AA2BXC,EAAAA,WAAW,EAAEA,mBA3BF;AA4BXC,EAAAA,WAAW,EAAEA,mBA5BF;AA8BX;AACAC,EAAAA,MAAM,EAAE7B,aA/BG;AAgCX8B,EAAAA,QAAQ,EAAEpB;AAhCC,CAAf;eAmCeb,M","sourcesContent":["import checkJsRuntime from './utils/checkJsRuntime';\nimport {\n    makeLogger,\n    consoleLogger,\n    getLogLevel,\n    setLogLevel,\n} from './utils/logger';\n\nexport const applyScreenComposer = (hoc) => config.screenComposers.push(hoc);\nexport const updateRuntime = (addon) => Object.assign(config, addon);\nexport const setupScreen = (elScreen) =>\n    config.screenComposers.reduce((r, hoc) => (r = hoc(elScreen)), elScreen);\n\nconst jsRuntime = checkJsRuntime();\nconst modulesRegistry = {};\n\nconst finalizeConfig = () => {\n    //...\n\n    Object.freeze(config);\n};\n\nconst config = {\n    //configurable runtime settings\n    jsRuntime, // web, native, node\n    defaultStyleMode: jsRuntime === 'native' ? 'galio' : 'mui',\n    useMobxProvider: false,\n    screenComposers: [],\n\n    //i18n\n    localePathBuilder: (locale, moduleName) =>\n        `assets/locale/${locale}/${moduleName}.json`,\n\n    //dynamic loading\n    import_: (url) => modulesRegistry[url],\n    register: (url, loadedModule) => {\n        modulesRegistry[url] = loadedModule;\n    },\n    /**\n     *\n     * @param {*} url - component url\n     */\n    lazyLoad: (url) => config.import_(url) || config.notFoundFallbabck,\n    notFoundFallbabck: () => null,\n    suspenseFallbabck: () => null,\n\n    //logger related\n    log: makeLogger(consoleLogger),\n    makeLogger,\n    getLogLevel: getLogLevel,\n    setLogLevel: setLogLevel,\n\n    //updater\n    update: updateRuntime,\n    finalize: finalizeConfig,\n};\n\nexport default config;\n"]}