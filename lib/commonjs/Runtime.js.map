{"version":3,"sources":["Runtime.js"],"names":["AppContext","React","createContext","composeScreen","hoc","globalScreenComposers","push","updateRuntime","addon","Object","assign","config","setupScreens","children","reduce","r","useGlobalProvider","Provider","globalProviders","setupProviders","modulesRegistry","finalizeConfig","process","env","NODE_ENV","freeze","defaultStyleMode","useNativeView","require","moduleName","register","loadedModule","log","consoleLogger","makeLogger","getLogLevel","setLogLevel","update","finalize"],"mappings":";;;;;;;AAIA;;AACA;;;;AALA;AACA;AACA;AAUO,MAAMA,UAAU,gBAAGC,eAAMC,aAAN,CAAoB,EAApB,CAAnB;;;;AACA,MAAMC,aAAa,GAAIC,GAAD,IAASC,qBAAqB,CAACC,IAAtB,CAA2BF,GAA3B,CAA/B;;;;AACA,MAAMG,aAAa,GAAIC,KAAD,IAAWC,MAAM,CAACC,MAAP,CAAcC,MAAd,EAAsBH,KAAtB,CAAjC;;;;AACA,MAAMI,YAAY,GAAIC,QAAD,IACxBR,qBAAqB,CAACS,MAAtB,CAA6B,CAACC,CAAD,EAAIX,GAAJ,KAAaW,CAAC,GAAGX,GAAG,CAACW,CAAD,CAAjD,EAAuDF,QAAvD,CADG;;;;AAGA,MAAMG,iBAAiB,GAAIC,QAAD,IAAcC,eAAe,CAACZ,IAAhB,CAAqBW,QAArB,CAAxC;;;;AACA,MAAME,cAAc,GAAIN,QAAD,IAC1BK,eAAe,CAACJ,MAAhB,CACI,CAACC,CAAD,EAAIE,QAAJ,KAAkBF,CAAC,gBAAG,6BAAC,QAAD,YAD1B,EAEIF,QAFJ,CADG;;;AAMP,MAAMO,eAAe,GAAG,EAAxB;AACA,MAAMf,qBAAqB,GAAG,EAA9B;AACA,MAAMa,eAAe,GAAG,EAAxB;;AAEA,MAAMG,cAAc,GAAG,MAAM;AACzB;AAEA,MAAI,CAACC,OAAO,CAACC,GAAR,CAAYC,QAAb,IAAyBF,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAtD,EAAqE;AACjE;AACAf,IAAAA,MAAM,CAACgB,MAAP,CAAcd,MAAd;AACAF,IAAAA,MAAM,CAACgB,MAAP,CAAcL,eAAd;AACAX,IAAAA,MAAM,CAACgB,MAAP,CAAcpB,qBAAd;AACAI,IAAAA,MAAM,CAACgB,MAAP,CAAcP,eAAd;AACH;AACJ,CAVD;;AAYA,MAAMP,MAAM,GAAG;AACX;AACAe,EAAAA,gBAAgB,EAAE,OAFP;AAGXC,EAAAA,aAAa,EAAE,KAHJ;AAKX;AACAC,EAAAA,OAAO,EAAGC,UAAD,IAAgBT,eAAe,CAACS,UAAD,CAN7B;AAOXC,EAAAA,QAAQ,EAAE,CAACD,UAAD,EAAaE,YAAb,KAA8B;AACpCX,IAAAA,eAAe,CAACS,UAAD,CAAf,GAA8BE,YAA9B;AACH,GATU;AAWX;AACAC,EAAAA,GAAG,EAAE,wBAAWC,qBAAX,CAZM;AAaXC,EAAAA,UAAU,EAAVA,kBAbW;AAcXC,EAAAA,WAAW,EAAEA,mBAdF;AAeXC,EAAAA,WAAW,EAAEA,mBAfF;AAiBX;AACAC,EAAAA,MAAM,EAAE9B,aAlBG;AAoBX+B,EAAAA,QAAQ,EAAEjB;AApBC,CAAf;eAuBeV,M","sourcesContent":["/**\n * @module ReactRuntime\n */\n\nimport React from 'react';\nimport {\n    makeLogger,\n    consoleLogger,\n    getLogLevel,\n    setLogLevel,\n} from './utils/logger';\n\nexport const AppContext = React.createContext({});\nexport const composeScreen = (hoc) => globalScreenComposers.push(hoc);\nexport const updateRuntime = (addon) => Object.assign(config, addon);\nexport const setupScreens = (children) =>\n    globalScreenComposers.reduce((r, hoc) => (r = hoc(r)), children);\n\nexport const useGlobalProvider = (Provider) => globalProviders.push(Provider);\nexport const setupProviders = (children) =>\n    globalProviders.reduce(\n        (r, Provider) => (r = <Provider>r</Provider>),\n        children\n    );\n\nconst modulesRegistry = {};\nconst globalScreenComposers = [];\nconst globalProviders = [];\n\nconst finalizeConfig = () => {\n    //todo: detect debug param in url and then set log level\n\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n        //all runtime configs are supposed to be unchanged during the whole app life cycle\n        Object.freeze(config);\n        Object.freeze(modulesRegistry);\n        Object.freeze(globalScreenComposers);\n        Object.freeze(globalProviders);\n    }\n};\n\nconst config = {\n    //configurable runtime settings\n    defaultStyleMode: 'galio',\n    useNativeView: false,\n\n    //dynamic loading\n    require: (moduleName) => modulesRegistry[moduleName],\n    register: (moduleName, loadedModule) => {\n        modulesRegistry[moduleName] = loadedModule;\n    },\n\n    //logger related\n    log: makeLogger(consoleLogger),\n    makeLogger,\n    getLogLevel: getLogLevel,\n    setLogLevel: setLogLevel,\n\n    //updater\n    update: updateRuntime,\n\n    finalize: finalizeConfig,\n};\n\nexport default config;\n"]}