{"version":3,"sources":["Runtime.js"],"names":["updateRuntime","addon","Object","assign","config","shouldLog","level","mapLogLevels","logLevel","INFO","debug","verbose","info","warning","error","disable","defaultStyleMode","onError","console","suspenseFallbabck","import_","Error","log","logInfoProducer","enabledLogLevel","args","Array","isArray","setLogLevel","update"],"mappings":";;;;;;;AAAA;;;;AAEO,MAAMA,aAAa,GAAIC,KAAD,IAAWC,MAAM,CAACC,MAAP,CAAcC,MAAd,EAAsBH,KAAtB,CAAjC;;;;AACA,MAAMI,SAAS,GAAIC,KAAD,IACrBC,YAAY,CAACD,KAAD,CAAZ,IAAuBF,MAAM,CAACI,QAA9B,GAAyCD,YAAY,CAACD,KAAD,CAArD,GAA+D,CAD5D;;;AAGP,MAAMG,IAAI,GAAG,CAAb;AAEA,MAAMF,YAAY,GAAG;AACjBG,EAAAA,KAAK,EAAE,CADU;AAEjBC,EAAAA,OAAO,EAAE,CAFQ;AAGjBC,EAAAA,IAAI,EAAEH,IAHW;AAIjBI,EAAAA,OAAO,EAAE,CAJQ;AAKjBC,EAAAA,KAAK,EAAE,CALU;AAMjBC,EAAAA,OAAO,EAAE;AANQ,CAArB;AASA,MAAMX,MAAM,GAAG;AACXY,EAAAA,gBAAgB,EAAE,KADP;AAEXC,EAAAA,OAAO,EAAGH,KAAD,IAAWI,OAAO,CAACJ,KAAR,CAAcA,KAAd,CAFT;AAGXK,EAAAA,iBAAiB,EAAE,mBAAM,uDAHd;AAIXC,EAAAA,OAAO,EAAE,MAAM;AACX,UAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;AACH,GANU;AAQXb,EAAAA,QAAQ,EAAEC,IARC;AASXa,EAAAA,GAAG,EAAE,CAAChB,KAAD,EAAQiB,eAAR,KAA4B;AAC7B,UAAMC,eAAe,GAAGnB,SAAS,CAACC,KAAD,CAAjC;;AAEA,QAAIkB,eAAJ,EAAqB;AACjB,UAAIC,IAAI,GAAGF,eAAe,EAA1B;AACAG,MAAAA,KAAK,CAACC,OAAN,CAAcF,IAAd,MAAwBA,IAAI,GAAG,CAACA,IAAD,CAA/B;AAEA,OAACD,eAAe,GAAGf,IAAlB,GAAyBS,OAAO,CAACJ,KAAjC,GAAyCI,OAAO,CAACI,GAAlD,aACQhB,KADR,QAEI,GAAGmB,IAFP;AAIH;AACJ,GArBU;AAuBXpB,EAAAA,SAvBW;AAwBXuB,EAAAA,WAAW,EAAGtB,KAAD,IAAYF,MAAM,CAACI,QAAP,GAAkBD,YAAY,CAACD,KAAD,CAxB5C;AAyBXuB,EAAAA,MAAM,EAAE7B;AAzBG,CAAf;eA4BeI,M","sourcesContent":["import React from 'react';\n\nexport const updateRuntime = (addon) => Object.assign(config, addon);\nexport const shouldLog = (level) =>\n    mapLogLevels[level] >= config.logLevel ? mapLogLevels[level] : 0;\n\nconst INFO = 3;\n\nconst mapLogLevels = {\n    debug: 1,\n    verbose: 2,\n    info: INFO,\n    warning: 4,\n    error: 5,\n    disable: 10,\n};\n\nconst config = {\n    defaultStyleMode: 'mui',\n    onError: (error) => console.error(error),\n    suspenseFallbabck: () => <div>Loading...</div>,\n    import_: () => {\n        throw new Error('\"import_\" method should be set by App firstly.');\n    },\n\n    logLevel: INFO,\n    log: (level, logInfoProducer) => {\n        const enabledLogLevel = shouldLog(level);\n\n        if (enabledLogLevel) {\n            let args = logInfoProducer();\n            Array.isArray(args) || (args = [args]);\n\n            (enabledLogLevel > INFO ? console.error : console.log)(\n                `[${level}]`,\n                ...args\n            );\n        }\n    },\n\n    shouldLog,\n    setLogLevel: (level) => (config.logLevel = mapLogLevels[level]),\n    update: updateRuntime,\n};\n\nexport default config;\n"]}