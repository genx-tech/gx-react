{"version":3,"sources":["SideMenu.js"],"names":["SubMenu","Menu","menuItem","path","icon","menuProps","exact","formatPathText","text","inner","makeMenuItems","routes","nodePathes","map","showInMenu","subRoutes","SideMenu","sitemap","props","location","menuItems","allPossibleNodes","pathname","nodes","filter","link","i","length","slice"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAcC,UAApB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,IAAD,EAAOC,IAAP,EAAaC,SAAb,EAAwBC,KAAxB,EAA+BC,cAA/B,KAAkD;AAC/D,QAAMC,IAAI,GAAGD,cAAc,CAACJ,IAAD,CAA3B;;AAEA,QAAMM,KAAK,gBACP,yEACI,2CAAOD,IAAP,CADJ,CADJ;;AAMA,sBACI,6BAAC,UAAD,CAAM,IAAN;AAAW,IAAA,GAAG,EAAEL,IAAhB;AAAsB,IAAA,IAAI,EAAE,uBAASC,IAAT,CAA5B;AAA4C,IAAA,KAAK,EAAEI;AAAnD,KAA6DH,SAA7D,gBACI,6BAAC,uBAAD;AAAS,IAAA,EAAE,EAAEF,IAAb;AAAmB,IAAA,KAAK,EAAEG;AAA1B,KACKG,KADL,CADJ,CADJ;AAOH,CAhBD;;AAkBA,MAAMC,aAAa,GAAG,CAACC,MAAD,EAASJ,cAAT,KAA4B;AAC9C,QAAMK,UAAU,GAAG,EAAnB;AAEA,SAAO,CACHD,MAAM,CAACE,GAAP,CACI,CAAC;AAAEV,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcU,IAAAA,UAAd;AAA0BC,IAAAA,SAA1B;AAAqCV,IAAAA,SAArC;AAAgDC,IAAAA;AAAhD,GAAD,KAA6D;AACzD,QAAI,CAACQ,UAAL,EAAiB;AACb,aAAO,KAAP;AACH;;AAEDF,IAAAA,UAAU,CAACT,IAAD,CAAV,GAAmBG,KAAnB;;AAEA,QAAIS,SAAJ,EAAe;AACX,0BACI,6BAAC,OAAD;AACI,QAAA,GAAG,EAAEZ,IADT;AAEI,QAAA,IAAI,EAAE,uBAASC,IAAT,CAFV;AAGI,QAAA,KAAK,eAAE,2CAAOG,cAAc,CAACJ,IAAD,CAArB;AAHX,SAIQE,SAJR,GAMKK,aAAa,CAACK,SAAD,EAAYR,cAAZ,CANlB,CADJ;AAUH;;AAED,WAAOL,QAAQ,CAACC,IAAD,EAAOC,IAAP,EAAaC,SAAb,EAAwBC,KAAxB,EAA+BC,cAA/B,CAAf;AACH,GAtBL,CADG,EAyBHK,UAzBG,CAAP;AA2BH,CA9BD;;AAgCA,MAAMI,QAAQ,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWV,EAAAA,cAAX;AAA2B,KAAGW;AAA9B,CAAD,KAA2C;AACxD,QAAMC,QAAQ,GAAG,kCAAjB;AACA,QAAM,CAACC,SAAD,EAAYR,UAAZ,IAA0B,oBAC5B,MAAMF,aAAa,CAACO,OAAD,EAAUV,cAAV,CADS,EAE5B,CAACU,OAAD,EAAUV,cAAV,CAF4B,CAAhC;AAIA,QAAMc,gBAAgB,GAAG,kCAAoBF,QAAQ,CAACG,QAA7B,CAAzB;AAEA,QAAMC,KAAK,GAAGF,gBAAgB,CAACG,MAAjB,CAAwB,CAACC,IAAD,EAAOC,CAAP,KAAa;AAC/C,QAAID,IAAI,IAAIb,UAAZ,EAAwB;AACpB,aAAO,CAACA,UAAU,CAACa,IAAD,CAAX,IAAqBC,CAAC,KAAK,CAAlC;AACH;;AAED,WAAO,KAAP;AACH,GANa,CAAd;AAQA,sBACI,6BAAC,UAAD;AACI,IAAA,mBAAmB,EAAEH,KADzB;AAEI,IAAA,eAAe,EAAEA,KAAK,CAACI,MAAN,GAAe,CAAf,GAAmBJ,KAAK,CAACK,KAAN,CAAY,CAAZ,CAAnB,GAAoCL;AAFzD,KAGQL,KAHR,GAKKE,SALL,CADJ;AASH,CAzBD;;eA2BeJ,Q","sourcesContent":["import React, { useMemo } from 'react';\nimport { useLocation, NavLink } from 'react-router-dom';\nimport { Menu } from 'antd';\n\nimport renderIt from '../hoc/renderIt';\nimport locationPathToNodes from '../utils/locationPathToNodes';\n\nconst { SubMenu } = Menu;\n\nconst menuItem = (path, icon, menuProps, exact, formatPathText) => {\n    const text = formatPathText(path);\n\n    const inner = (\n        <>\n            <span>{text}</span>\n        </>\n    );\n\n    return (\n        <Menu.Item key={path} icon={renderIt(icon)} title={text} {...menuProps}>\n            <NavLink to={path} exact={exact}>\n                {inner}\n            </NavLink>\n        </Menu.Item>\n    );\n};\n\nconst makeMenuItems = (routes, formatPathText) => {\n    const nodePathes = {};\n\n    return [\n        routes.map(\n            ({ path, icon, showInMenu, subRoutes, menuProps, exact }) => {\n                if (!showInMenu) {\n                    return false;\n                }\n\n                nodePathes[path] = exact;\n\n                if (subRoutes) {\n                    return (\n                        <SubMenu\n                            key={path}\n                            icon={renderIt(icon)}\n                            title={<span>{formatPathText(path)}</span>}\n                            {...menuProps}\n                        >\n                            {makeMenuItems(subRoutes, formatPathText)}\n                        </SubMenu>\n                    );\n                }\n\n                return menuItem(path, icon, menuProps, exact, formatPathText);\n            }\n        ),\n        nodePathes,\n    ];\n};\n\nconst SideMenu = ({ sitemap, formatPathText, ...props }) => {\n    const location = useLocation();\n    const [menuItems, nodePathes] = useMemo(\n        () => makeMenuItems(sitemap, formatPathText),\n        [sitemap, formatPathText]\n    );\n    const allPossibleNodes = locationPathToNodes(location.pathname);\n\n    const nodes = allPossibleNodes.filter((link, i) => {\n        if (link in nodePathes) {\n            return !nodePathes[link] || i === 0;\n        }\n\n        return false;\n    });\n\n    return (\n        <Menu\n            defaultSelectedKeys={nodes}\n            defaultOpenKeys={nodes.length > 1 ? nodes.slice(1) : nodes}\n            {...props}\n        >\n            {menuItems}\n        </Menu>\n    );\n};\n\nexport default SideMenu;\n"]}