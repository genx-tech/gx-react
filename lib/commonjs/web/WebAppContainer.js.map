{"version":3,"sources":["WebAppContainer.js"],"names":["WebAppContainer","locale","localeLoader","iconFamilies","children","elWrapped"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,eAAe,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,YAAV;AAAwBC,EAAAA,YAAxB;AAAsCC,EAAAA;AAAtC,CAAD,KAAsD;AAC1E,QAAMC,SAAS,GAAG,oBAAQ,MAAM,6BAAeD,QAAf,CAAd,EAAwC,CAACA,QAAD,CAAxC,CAAlB;AAEA,sBACI,6BAAC,mBAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE;AAAED,MAAAA;AAAF;AAA5B,kBACI,6BAAC,qBAAD;AAAc,IAAA,MAAM,EAAEF,MAAtB;AAA8B,IAAA,MAAM,EAAEC;AAAtC,KACKG,SADL,CADJ,CADJ;AAOH,CAVD;;eAYeL,e","sourcesContent":["import React, { useMemo } from 'react';\nimport I18nProvider from '../i18n/I18nProvider';\nimport { AppContext, setupProviders } from '../Runtime';\n\nconst WebAppContainer = ({ locale, localeLoader, iconFamilies, children }) => {\n    const elWrapped = useMemo(() => setupProviders(children), [children]);\n\n    return (\n        <AppContext.Provider value={{ iconFamilies }}>\n            <I18nProvider locale={locale} loader={localeLoader}>\n                {elWrapped}\n            </I18nProvider>\n        </AppContext.Provider>\n    );\n};\n\nexport default WebAppContainer;\n"]}