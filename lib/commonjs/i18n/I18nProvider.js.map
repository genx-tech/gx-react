{"version":3,"sources":["I18nProvider.js"],"names":["I18nContext","I18nProvider","locale","loader","children","cache","error","message","startsWith","console"],"mappings":";;;;;;;;AAAA;;AACA;;;;;;AAEO,MAAMA,WAAW,gBAAG,2BAApB;AAEP;AACA;AACA;AACA;AACA;AACA;;;;AACe,SAASC,YAAT,CAAsB;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,MAAV;AAAkBC,EAAAA;AAAlB,CAAtB,EAAoD;AAC/D,sBACI,6BAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAED,MAAAA,MAAF;AAAUE,MAAAA,KAAK,EAAE;AAAjB;AAA7B,kBACI,6BAAC,uBAAD;AACI,IAAA,MAAM,EAAEH,MADZ;AAEI,IAAA,OAAO,EAAGI,KAAD,IAAW;AAChB,UACIA,KAAK,CAACC,OAAN,CAAcC,UAAd,CACI,wCADJ,CADJ,EAIE;AACE;AACH;;AAEDC,MAAAA,OAAO,CAACH,KAAR,CAAcA,KAAd;AACH;AAZL,KAcKF,QAdL,CADJ,CADJ;AAoBH","sourcesContent":["import React, { createContext } from 'react';\nimport { IntlProvider } from 'react-intl';\n\nexport const I18nContext = createContext();\n\n/**\n * I18nProvider component.\n * @param {Object} props\n * @property {stirng} props.locale\n * @property {Function} props.loader\n */\nexport default function I18nProvider({ locale, loader, children }) {\n    return (\n        <I18nContext.Provider value={{ loader, cache: {} }}>\n            <IntlProvider\n                locale={locale}\n                onError={(error) => {\n                    if (\n                        error.message.startsWith(\n                            '[React Intl Error MISSING_TRANSLATION]'\n                        )\n                    ) {\n                        return;\n                    }\n\n                    console.error(error);\n                }}\n            >\n                {children}\n            </IntlProvider>\n        </I18nContext.Provider>\n    );\n}\n"]}