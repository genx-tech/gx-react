{"version":3,"sources":["useI18n.js"],"names":["cache","registerLocale","locale","moduleName","loadedModule","messages","others","messagesWithId","key","msg","id","defaultMessage","moduleKey","useI18n","loader","I18nContext","intl","state","cachedModule","Runtime","log","loading","value","T","identity","intlMessages","messageId","vars","formatMessage"],"mappings":";;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,KAAK,GAAG,EAAd;AAEA;AACA;AACA;AACA;AACA;AACA;;AACO,MAAMC,cAAc,GAAG,CAACC,MAAD,EAASC,UAAT,EAAqBC,YAArB,KAAsC;AAChE,QAAM;AAAEC,IAAAA,QAAF;AAAY,OAAGC;AAAf,MAA0BF,YAAhC;AACA,QAAMG,cAAc,GAAG,EAAvB;;AAEA,OAAK,IAAIC,GAAT,IAAgBH,QAAhB,EAA0B;AACtB,UAAMI,GAAG,GAAGJ,QAAQ,CAACG,GAAD,CAApB;AACA,UAAME,EAAE,GAAI,GAAEP,UAAW,IAAGK,GAAI,EAAhC,CAFsB,CAItB;;AACAD,IAAAA,cAAc,CAACC,GAAD,CAAd,GACI,OAAOC,GAAP,KAAe,QAAf,GACM;AACIC,MAAAA,EADJ;AAEIC,MAAAA,cAAc,EAAEF;AAFpB,KADN,GAKM,EACI,GAAGA,GADP;AAEIC,MAAAA;AAFJ,KANV;AAUH;;AAED,QAAME,SAAS,GAAI,GAAEV,MAAO,IAAGC,UAAW,EAA1C;AAEA,SAAQH,KAAK,CAACY,SAAD,CAAL,GAAmB,EACvB,GAAGN,MADoB;AAEvBE,IAAAA,GAAG,EAAEI,SAFkB;AAGvBP,IAAAA,QAAQ,EAAE,+BAAeE,cAAf;AAHa,GAA3B;AAKH,CA5BM;AA8BP;AACA;AACA;AACA;AACA;;;;;AACe,SAASM,OAAT,CAAiBV,UAAjB,EAA6B;AACxC,QAAM;AAAEW,IAAAA;AAAF,MAAa,uBAAWC,yBAAX,CAAnB;AACA,QAAMC,IAAI,GAAG,yBAAb;AAEA,QAAMC,KAAK,GAAG,2BAAa,YAAY;AACnC,QAAId,UAAJ,EAAgB;AACZ,YAAMS,SAAS,GAAI,GAAEI,IAAI,CAACd,MAAO,IAAGC,UAAW,EAA/C;AAEA,YAAMe,YAAY,GAAGlB,KAAK,CAACY,SAAD,CAA1B;;AACA,UAAIM,YAAJ,EAAkB;AACdC,yBAAQC,GAAR,CACI,SADJ,EAEI,MAAO,qBAAoBR,SAAU,eAFzC;;AAIA,eAAOM,YAAP;AACH;;AAED,aACIJ,MAAM,IACNb,cAAc,CACVe,IAAI,CAACd,MADK,EAEVC,UAFU,EAGV,MAAMW,MAAM,CAACE,IAAI,CAACd,MAAN,EAAcC,UAAd,CAHF,CAFlB;AAQH;;AAED,WAAO,IAAP;AACH,GAxBa,EAwBX,CAACW,MAAD,EAASE,IAAI,CAACd,MAAd,EAAsBC,UAAtB,CAxBW,CAAd;;AA0BA,MAAIc,KAAK,CAACI,OAAN,IAAiBJ,KAAK,CAACK,KAAN,IAAe,IAApC,EAA0C;AACtC,WAAO,EACH,GAAGL,KADA;AAEHD,MAAAA,IAFG;AAGHO,MAAAA,CAAC,EAAEC;AAHA,KAAP;AAKH;;AAED,QAAMC,YAAY,GAAGR,KAAK,CAACK,KAAN,CAAYjB,QAAjC;AAEA,SAAO;AACHgB,IAAAA,OAAO,EAAE,KADN;AAEHL,IAAAA,IAFG;AAGHO,IAAAA,CAAC,EAAE,CAACG,SAAD,EAAYC,IAAZ,KACCF,YAAY,CAACC,SAAD,CAAZ,IAA2B,IAA3B,GACM,0BAAYA,SAAZ,CADN,GAEMV,IAAI,CAACY,aAAL,CAAmBH,YAAY,CAACC,SAAD,CAA/B,EAA4CC,IAA5C;AANP,GAAP;AAQH","sourcesContent":["import { useContext } from 'react';\nimport { useIntl, defineMessages } from 'react-intl';\n\nimport Runtime from '../Runtime';\nimport useAsyncMemo from '../hooks/useAsyncMemo';\nimport { identity } from '../utils/callback';\nimport { I18nContext } from './I18nProvider';\nimport passThrough from './passThrough';\n\n/**\n * Features:\n *  Lazy locale loading, better performance for web app\n *  Messages grouped by modules\n *\n * @see {@link https://formatjs.io/guides/message-syntax/} for message syntax\n */\n\nconst cache = {};\n\n/**\n * Register a preloaded locale module\n * @param {*} loader\n * @param {*} locale\n * @param {*} moduleName\n */\nexport const registerLocale = (locale, moduleName, loadedModule) => {\n    const { messages, ...others } = loadedModule;\n    const messagesWithId = {};\n\n    for (let key in messages) {\n        const msg = messages[key];\n        const id = `${moduleName}.${key}`;\n\n        //todo: be replaced with pre-compiled locale data\n        messagesWithId[key] =\n            typeof msg === 'string'\n                ? {\n                      id,\n                      defaultMessage: msg,\n                  }\n                : {\n                      ...msg,\n                      id,\n                  };\n    }\n\n    const moduleKey = `${locale}/${moduleName}`;\n\n    return (cache[moduleKey] = {\n        ...others,\n        key: moduleKey,\n        messages: defineMessages(messagesWithId),\n    });\n};\n\n/**\n * Returns a translator { t = (text, variables) => <translated and injected text> } of specified locale module.\n * @param {string} [moduleName]\n * @returns {Object} { loading, t }\n */\nexport default function useI18n(moduleName) {\n    const { loader } = useContext(I18nContext);\n    const intl = useIntl();\n\n    const state = useAsyncMemo(async () => {\n        if (moduleName) {\n            const moduleKey = `${intl.locale}/${moduleName}`;\n\n            const cachedModule = cache[moduleKey];\n            if (cachedModule) {\n                Runtime.log(\n                    'verbose',\n                    () => `Load locale data \"${moduleKey}\" from cache.`\n                );\n                return cachedModule;\n            }\n\n            return (\n                loader &&\n                registerLocale(\n                    intl.locale,\n                    moduleName,\n                    await loader(intl.locale, moduleName)\n                )\n            );\n        }\n\n        return null;\n    }, [loader, intl.locale, moduleName]);\n\n    if (state.loading || state.value == null) {\n        return {\n            ...state,\n            intl,\n            T: identity,\n        };\n    }\n\n    const intlMessages = state.value.messages;\n\n    return {\n        loading: false,\n        intl,\n        T: (messageId, vars) =>\n            intlMessages[messageId] == null\n                ? passThrough(messageId)\n                : intl.formatMessage(intlMessages[messageId], vars),\n    };\n}\n"]}