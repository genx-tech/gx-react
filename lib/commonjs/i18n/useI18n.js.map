{"version":3,"sources":["useI18n.js"],"names":["useI18n","moduleName","loader","cache","I18nContext","intl","moduleKey","locale","state","cachedModule","localeData","messages","key","msg","defaultMessage","id","loading","value","t","identity","intlMessages","messageId","vars","formatMessage"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACe,SAASA,OAAT,CAAiBC,UAAjB,EAA6B;AACxC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoB,uBAAWC,yBAAX,CAA1B;AACA,QAAMC,IAAI,GAAG,yBAAb;AAEA,QAAMC,SAAS,aAAMD,IAAI,CAACE,MAAX,cAAqBN,UAArB,CAAf;AAEA,QAAMO,KAAK,GAAG,2BAAa,YAAY;AACnC,UAAMC,YAAY,GAAGN,KAAK,CAACG,SAAD,CAA1B;;AACA,QAAIG,YAAJ,EAAkB;AACd,aAAOA,YAAP;AACH;;AAED,UAAMC,UAAU,GAAG,MAAMR,MAAM,CAACG,IAAI,CAACE,MAAN,EAAcN,UAAd,CAA/B;AAEA,UAAMU,QAAQ,GAAG,EAAjB;;AAEA,SAAK,IAAIC,GAAT,IAAgBF,UAAU,CAACC,QAA3B,EAAqC;AACjC,UAAIE,GAAG,GAAGH,UAAU,CAACC,QAAX,CAAoBC,GAApB,CAAV;;AACA,UAAI,OAAOC,GAAP,KAAe,QAAnB,EAA6B;AACzBA,QAAAA,GAAG,GAAG;AACFC,UAAAA,cAAc,EAAED;AADd,SAAN;AAGH;;AACDF,MAAAA,QAAQ,CAACC,GAAD,CAAR,GAAgB;AACZG,QAAAA,EAAE,EAAEd,UAAU,GAAG,GAAb,GAAmBW,GADX;AAEZ,WAAGC;AAFS,OAAhB;AAIH;;AAED,WAAQV,KAAK,CAACG,SAAD,CAAL,GAAmB,EACvB,GAAGI,UADoB;AAEvBC,MAAAA,QAAQ,EAAE,+BAAeA,QAAf;AAFa,KAA3B;AAIH,GA3Ba,EA2BX,CAACT,MAAD,EAASG,IAAI,CAACE,MAAd,EAAsBN,UAAtB,CA3BW,CAAd;;AA6BA,MAAIO,KAAK,CAACQ,OAAN,IAAiBR,KAAK,CAACS,KAAN,IAAe,IAApC,EAA0C;AACtC,WAAO,EACH,GAAGT,KADA;AAEHU,MAAAA,CAAC,EAAEC;AAFA,KAAP;AAIH;;AAED,QAAMC,YAAY,GAAGZ,KAAK,CAACS,KAAN,CAAYN,QAAjC;AAEA,SAAO;AACHK,IAAAA,OAAO,EAAE,KADN;AAEHE,IAAAA,CAAC,EAAE,CAACG,SAAD,EAAYC,IAAZ,KACCF,YAAY,CAACC,SAAD,CAAZ,IAA2B,IAA3B,GACM,0BAAYA,SAAZ,CADN,GAEMhB,IAAI,CAACkB,aAAL,CAAmBH,YAAY,CAACC,SAAD,CAA/B,EAA4CC,IAA5C;AALP,GAAP;AAOH","sourcesContent":["import { useContext } from 'react';\nimport { useIntl, defineMessages } from 'react-intl';\nimport useAsyncMemo from '../hooks/useAsyncMemo';\nimport { identity } from '../utils/callback';\nimport { I18nContext } from './I18nProvider';\nimport passThrough from './passThrough';\n\n/**\n * @see {@link https://formatjs.io/guides/message-syntax/} for message syntax\n */\n\n/**\n * Returns a translator { t = (text, variables) => <translated and injected text> } of specified locale module.\n * @param {string} [moduleName]\n * @returns {Object} { loading, t }\n */\nexport default function useI18n(moduleName) {\n    const { loader, cache } = useContext(I18nContext);\n    const intl = useIntl();\n\n    const moduleKey = `${intl.locale}/${moduleName}`;\n\n    const state = useAsyncMemo(async () => {\n        const cachedModule = cache[moduleKey];\n        if (cachedModule) {\n            return cachedModule;\n        }\n\n        const localeData = await loader(intl.locale, moduleName);\n\n        const messages = {};\n\n        for (let key in localeData.messages) {\n            let msg = localeData.messages[key];\n            if (typeof msg === 'string') {\n                msg = {\n                    defaultMessage: msg,\n                };\n            }\n            messages[key] = {\n                id: moduleName + '.' + key,\n                ...msg,\n            };\n        }\n\n        return (cache[moduleKey] = {\n            ...localeData,\n            messages: defineMessages(messages),\n        });\n    }, [loader, intl.locale, moduleName]);\n\n    if (state.loading || state.value == null) {\n        return {\n            ...state,\n            t: identity,\n        };\n    }\n\n    const intlMessages = state.value.messages;\n\n    return {\n        loading: false,\n        t: (messageId, vars) =>\n            intlMessages[messageId] == null\n                ? passThrough(messageId)\n                : intl.formatMessage(intlMessages[messageId], vars),\n    };\n}\n"]}