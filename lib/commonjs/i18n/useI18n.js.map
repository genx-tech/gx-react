{"version":3,"sources":["useI18n.js"],"names":["useI18n","moduleName","loader","cache","I18nContext","intl","moduleKey","locale","state","cachedModule","messages","others","messagesWithId","key","msg","id","defaultMessage","loading","value","t","identity","intlMessages","messageId","vars","formatMessage"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACe,SAASA,OAAT,CAAiBC,UAAjB,EAA6B;AACxC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoB,uBAAWC,yBAAX,CAA1B;AACA,QAAMC,IAAI,GAAG,yBAAb;AAEA,QAAMC,SAAS,aAAMD,IAAI,CAACE,MAAX,cAAqBN,UAArB,CAAf;AAEA,QAAMO,KAAK,GAAG,2BAAa,YAAY;AACnC,UAAMC,YAAY,GAAGN,KAAK,CAACG,SAAD,CAA1B;;AACA,QAAIG,YAAJ,EAAkB;AACd,aAAOA,YAAP;AACH;;AAED,UAAM;AAAEC,MAAAA,QAAF;AAAY,SAAGC;AAAf,QAA0B,MAAMT,MAAM,CAACG,IAAI,CAACE,MAAN,EAAcN,UAAd,CAA5C;AACA,UAAMW,cAAc,GAAG,EAAvB;;AAEA,SAAK,IAAIC,GAAT,IAAgBH,QAAhB,EAA0B;AACtB,YAAMI,GAAG,GAAGJ,QAAQ,CAACG,GAAD,CAApB;AACA,YAAME,EAAE,aAAMd,UAAN,cAAoBY,GAApB,CAAR;AAEAD,MAAAA,cAAc,CAACC,GAAD,CAAd,GACI,OAAOC,GAAP,KAAe,QAAf,GACM;AACIC,QAAAA,EADJ;AAEIC,QAAAA,cAAc,EAAEF;AAFpB,OADN,GAKM,EACI,GAAGA,GADP;AAEIC,QAAAA;AAFJ,OANV;AAUH;;AAED,WAAQZ,KAAK,CAACG,SAAD,CAAL,GAAmB,EACvB,GAAGK,MADoB;AAEvBD,MAAAA,QAAQ,EAAE,+BAAeE,cAAf;AAFa,KAA3B;AAIH,GA7Ba,EA6BX,CAACV,MAAD,EAASG,IAAI,CAACE,MAAd,EAAsBN,UAAtB,CA7BW,CAAd;;AA+BA,MAAIO,KAAK,CAACS,OAAN,IAAiBT,KAAK,CAACU,KAAN,IAAe,IAApC,EAA0C;AACtC,WAAO,EACH,GAAGV,KADA;AAEHW,MAAAA,CAAC,EAAEC;AAFA,KAAP;AAIH;;AAED,QAAMC,YAAY,GAAGb,KAAK,CAACU,KAAN,CAAYR,QAAjC;AAEA,SAAO;AACHO,IAAAA,OAAO,EAAE,KADN;AAEHE,IAAAA,CAAC,EAAE,CAACG,SAAD,EAAYC,IAAZ,KACCF,YAAY,CAACC,SAAD,CAAZ,IAA2B,IAA3B,GACM,0BAAYA,SAAZ,CADN,GAEMjB,IAAI,CAACmB,aAAL,CAAmBH,YAAY,CAACC,SAAD,CAA/B,EAA4CC,IAA5C;AALP,GAAP;AAOH","sourcesContent":["import { useContext } from 'react';\nimport { useIntl, defineMessages } from 'react-intl';\nimport useAsyncMemo from '../hooks/useAsyncMemo';\nimport { identity } from '../utils/callback';\nimport { I18nContext } from './I18nProvider';\nimport passThrough from './passThrough';\n\n/**\n * Features:\n *  Lazy locale loading, better performance for web app \n *  Messages grouped by modules \n *  \n * @see {@link https://formatjs.io/guides/message-syntax/} for message syntax\n */\n\n/**\n * Returns a translator { t = (text, variables) => <translated and injected text> } of specified locale module.\n * @param {string} [moduleName]\n * @returns {Object} { loading, t }\n */\nexport default function useI18n(moduleName) {\n    const { loader, cache } = useContext(I18nContext);\n    const intl = useIntl();\n\n    const moduleKey = `${intl.locale}/${moduleName}`;\n\n    const state = useAsyncMemo(async () => {\n        const cachedModule = cache[moduleKey];\n        if (cachedModule) {\n            return cachedModule;\n        }\n\n        const { messages, ...others } = await loader(intl.locale, moduleName);\n        const messagesWithId = {};\n\n        for (let key in messages) {\n            const msg = messages[key];\n            const id = `${moduleName}.${key}`;\n\n            messagesWithId[key] =\n                typeof msg === 'string'\n                    ? {\n                          id,\n                          defaultMessage: msg,\n                      }\n                    : {\n                          ...msg,\n                          id,\n                      };\n        }\n\n        return (cache[moduleKey] = {\n            ...others,\n            messages: defineMessages(messagesWithId),\n        });\n    }, [loader, intl.locale, moduleName]);\n\n    if (state.loading || state.value == null) {\n        return {\n            ...state,\n            t: identity,\n        };\n    }\n\n    const intlMessages = state.value.messages;\n\n    return {\n        loading: false,\n        t: (messageId, vars) =>\n            intlMessages[messageId] == null\n                ? passThrough(messageId)\n                : intl.formatMessage(intlMessages[messageId], vars),\n    };\n}\n"]}