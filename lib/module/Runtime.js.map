{"version":3,"sources":["Runtime.js"],"names":["React","makeLogger","consoleLogger","getLogLevel","setLogLevel","isDevMode","process","env","NODE_ENV","AppContext","createContext","composeScreen","hoc","globalScreenComposers","push","updateRuntime","addon","Object","assign","config","setupScreens","children","reduce","r","useGlobalProvider","Provider","globalProviders","setupProviders","modulesRegistry","finalizeConfig","freeze","defaultStyleMode","useNativeView","require","moduleName","register","loadedModule","log","update","finalize"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,UADJ,EAEIC,aAFJ,EAGIC,WAHJ,EAIIC,WAJJ,QAKO,gBALP;AAOA,MAAMC,SAAS,GACX,CAACC,OAAO,CAACC,GAAR,CAAYC,QAAb,IAAyBF,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aADtD;AAGA,OAAO,MAAMC,UAAU,gBAAGT,KAAK,CAACU,aAAN,CAAoB,EAApB,CAAnB;AACP,OAAO,MAAMC,aAAa,GAAIC,GAAD,IAASC,qBAAqB,CAACC,IAAtB,CAA2BF,GAA3B,CAA/B;AACP,OAAO,MAAMG,aAAa,GAAIC,KAAD,IAAWC,MAAM,CAACC,MAAP,CAAcC,MAAd,EAAsBH,KAAtB,CAAjC;AACP,OAAO,MAAMI,YAAY,GAAIC,QAAD,IACxBR,qBAAqB,CAACS,MAAtB,CAA6B,CAACC,CAAD,EAAIX,GAAJ,KAAaW,CAAC,GAAGX,GAAG,CAACW,CAAD,CAAjD,EAAuDF,QAAvD,CADG;AAGP,OAAO,MAAMG,iBAAiB,GAAIC,QAAD,IAAcC,eAAe,CAACZ,IAAhB,CAAqBW,QAArB,CAAxC;AACP,OAAO,MAAME,cAAc,GAAIN,QAAD,IAC1BK,eAAe,CAACJ,MAAhB,CACI,CAACC,CAAD,EAAIE,QAAJ,KAAkBF,CAAC,gBAAG,oBAAC,QAAD,YAD1B,EAEIF,QAFJ,CADG;AAMP,MAAMO,eAAe,GAAG,EAAxB;AACA,MAAMf,qBAAqB,GAAG,EAA9B;AACA,MAAMa,eAAe,GAAG,EAAxB;;AAEA,MAAMG,cAAc,GAAG,MAAM;AACzB;AAEA,MAAIxB,SAAJ,EAAe;AACX;AACAY,IAAAA,MAAM,CAACa,MAAP,CAAcX,MAAd;AACAF,IAAAA,MAAM,CAACa,MAAP,CAAcF,eAAd;AACAX,IAAAA,MAAM,CAACa,MAAP,CAAcjB,qBAAd;AACAI,IAAAA,MAAM,CAACa,MAAP,CAAcJ,eAAd;AACH;AACJ,CAVD;;AAYA,MAAMP,MAAM,GAAG;AACXd,EAAAA,SADW;AAEX;AACA0B,EAAAA,gBAAgB,EAAE,OAHP;AAIXC,EAAAA,aAAa,EAAE,KAJJ;AAMX;AACAC,EAAAA,OAAO,EAAGC,UAAD,IAAgBN,eAAe,CAACM,UAAD,CAP7B;AAQXC,EAAAA,QAAQ,EAAE,CAACD,UAAD,EAAaE,YAAb,KAA8B;AACpCR,IAAAA,eAAe,CAACM,UAAD,CAAf,GAA8BE,YAA9B;AACH,GAVU;AAYX;AACAC,EAAAA,GAAG,EAAEpC,UAAU,CAACC,aAAD,CAbJ;AAcXD,EAAAA,UAdW;AAeXE,EAAAA,WAAW,EAAEA,WAfF;AAgBXC,EAAAA,WAAW,EAAEA,WAhBF;AAkBX;AACAkC,EAAAA,MAAM,EAAEvB,aAnBG;AAqBXwB,EAAAA,QAAQ,EAAEV;AArBC,CAAf;AAwBA,eAAeV,MAAf","sourcesContent":["/**\n * @module ReactRuntime\n */\n\nimport React from 'react';\nimport {\n    makeLogger,\n    consoleLogger,\n    getLogLevel,\n    setLogLevel,\n} from './utils/logger';\n\nconst isDevMode =\n    !process.env.NODE_ENV || process.env.NODE_ENV === 'development';\n\nexport const AppContext = React.createContext({});\nexport const composeScreen = (hoc) => globalScreenComposers.push(hoc);\nexport const updateRuntime = (addon) => Object.assign(config, addon);\nexport const setupScreens = (children) =>\n    globalScreenComposers.reduce((r, hoc) => (r = hoc(r)), children);\n\nexport const useGlobalProvider = (Provider) => globalProviders.push(Provider);\nexport const setupProviders = (children) =>\n    globalProviders.reduce(\n        (r, Provider) => (r = <Provider>r</Provider>),\n        children\n    );\n\nconst modulesRegistry = {};\nconst globalScreenComposers = [];\nconst globalProviders = [];\n\nconst finalizeConfig = () => {\n    //todo: detect debug param in url and then set log level\n\n    if (isDevMode) {\n        //all runtime configs are supposed to be unchanged during the whole app life cycle\n        Object.freeze(config);\n        Object.freeze(modulesRegistry);\n        Object.freeze(globalScreenComposers);\n        Object.freeze(globalProviders);\n    }\n};\n\nconst config = {\n    isDevMode,\n    //configurable runtime settings\n    defaultStyleMode: 'galio',\n    useNativeView: false,\n\n    //dynamic loading\n    require: (moduleName) => modulesRegistry[moduleName],\n    register: (moduleName, loadedModule) => {\n        modulesRegistry[moduleName] = loadedModule;\n    },\n\n    //logger related\n    log: makeLogger(consoleLogger),\n    makeLogger,\n    getLogLevel: getLogLevel,\n    setLogLevel: setLogLevel,\n\n    //updater\n    update: updateRuntime,\n\n    finalize: finalizeConfig,\n};\n\nexport default config;\n"]}