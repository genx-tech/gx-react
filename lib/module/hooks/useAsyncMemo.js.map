{"version":3,"sources":["useAsyncMemo.js"],"names":["useEffect","useAsyncCallback","useAsyncMemo","fn","deps","state","callback"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,YAAT,CAAsBC,EAAtB,EAA0BC,IAA1B,EAAgC;AAC3C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,gBAAgB,CAACE,EAAD,EAAKC,IAAL,EAAW,IAAX,CAA1C;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,QAAQ;AACX,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;AAIA,SAAOD,KAAP;AACH","sourcesContent":["import { useEffect } from 'react';\nimport useAsyncCallback from './useAsyncCallback';\n\n/**\n * React hook that returns a state with shape { value, error, loading } of which the value is returned by an async function. Just like async version of useMemo.\n * @param {*} fn\n * @param {*} deps\n */\nexport default function useAsyncMemo(fn, deps) {\n    const [state, callback] = useAsyncCallback(fn, deps, true);\n\n    useEffect(() => {\n        callback();\n    }, [callback]);\n\n    return state;\n}\n"]}