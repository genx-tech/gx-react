{"version":3,"sources":["useDebounceCallback.js"],"names":["useEffect","useRef","useMemo","useDebounceCallback","fn","wait","timer","debounced","current","clearTimeout","args","setTimeout"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,OAA5B,QAA2C,OAA3C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,mBAAT,CAA6BC,EAA7B,EAAiCC,IAAjC,EAAuC;AAClDA,EAAAA,IAAI,IAAI,IAAR,KAAiBA,IAAI,GAAG,IAAxB;AAEA,QAAMC,KAAK,GAAGL,MAAM,CAAC,IAAD,CAApB;AAEA,QAAMM,SAAS,GAAGL,OAAO,CAAC,MAAM;AAC5B,QAAII,KAAK,CAACE,OAAV,EAAmB;AACf;AACAC,MAAAA,YAAY,CAACH,KAAK,CAACE,OAAP,CAAZ;AACAF,MAAAA,KAAK,CAACE,OAAN,GAAgB,IAAhB;AACH;;AAED,WAAO,CAAC,GAAGE,IAAJ,KAAa;AAChB,UAAI,CAACJ,KAAK,CAACE,OAAX,EAAoB;AAChBJ,QAAAA,EAAE,CAAC,GAAGM,IAAJ,CAAF;AACAJ,QAAAA,KAAK,CAACE,OAAN,GAAgBG,UAAU,CAAC,MAAM;AAC7BL,UAAAA,KAAK,CAACE,OAAN,GAAgB,IAAhB;AACH,SAFyB,EAEvBH,IAFuB,CAA1B;AAGH,OANe,CAOhB;;AACH,KARD;AASH,GAhBwB,EAgBtB,CAACD,EAAD,EAAKC,IAAL,CAhBsB,CAAzB,CALkD,CAuBlD;;AACAL,EAAAA,SAAS,CAAC,MAAM,MAAMM,KAAK,CAACE,OAAN,IAAiBC,YAAY,CAACH,KAAK,CAACE,OAAP,CAA1C,EAA2D,EAA3D,CAAT;AAEA,SAAOD,SAAP;AACH","sourcesContent":["import { useEffect, useRef, useMemo } from 'react';\n\n/**\n * React hook that debounce an function call.\n * lodash debounce has been observed that sometimes the debounced handler is never invoked after wait/maxWait period\n * rewrite with hooks\n * @param {Function} fn\n * @param {integer} [wait=2000] - Wait milliseconds after last invoke\n * @return {Function} Debounced function\n */\nexport default function useDebounceCallback(fn, wait) {\n    wait != null || (wait = 2000);\n\n    const timer = useRef(null);\n\n    const debounced = useMemo(() => {\n        if (timer.current) {\n            //whenever deps changes, reset the timer\n            clearTimeout(timer.current);\n            timer.current = null;\n        }\n\n        return (...args) => {\n            if (!timer.current) {\n                fn(...args);\n                timer.current = setTimeout(() => {\n                    timer.current = null;\n                }, wait);\n            }\n            //else ignored within waiting period\n        };\n    }, [fn, wait]);\n\n    //clear timer on unmounting\n    useEffect(() => () => timer.current && clearTimeout(timer.current), []);\n\n    return debounced;\n}\n"]}