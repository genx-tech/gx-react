{"version":3,"sources":["useAsyncCallback.js"],"names":["useCallback","useState","useRef","useMountedChecker","useAsyncCallback","fn","deps","loadingState","lastCallId","isMounted","state","setState","loading","applyChange","payload","prevState","callback","args","callId","current","then","value","catch","error"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,EAAgCC,MAAhC,QAA8C,OAA9C;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,gBAAT,CAA0BC,EAA1B,EAA8BC,IAA9B,EAAoCC,YAApC,EAAkD;AAC7D,QAAMC,UAAU,GAAGN,MAAM,CAAC,CAAD,CAAzB;AACA,QAAMO,SAAS,GAAGN,iBAAiB,EAAnC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC;AAC/BW,IAAAA,OAAO,EAAEL,YAAY,GAAG,IAAH,GAAU;AADA,GAAD,CAAlC;AAGA,QAAMM,WAAW,GAAGb,WAAW,CAC1Bc,OAAD,IAAa;AACTH,IAAAA,QAAQ,CAAEI,SAAD,KAAgB,EAAE,GAAGA,SAAL;AAAgB,SAAGD;AAAnB,KAAhB,CAAD,CAAR;AACH,GAH0B,EAI3B,CAACH,QAAD,CAJ2B,CAA/B;AAOA,QAAMK,QAAQ,GAAGhB,WAAW,CACxB,CAAC,GAAGiB,IAAJ,KAAa;AACT,UAAMC,MAAM,GAAG,EAAEV,UAAU,CAACW,OAA5B;AACAR,IAAAA,QAAQ,CAAEI,SAAD,KAAgB,EAAE,GAAGA,SAAL;AAAgBH,MAAAA,OAAO,EAAE;AAAzB,KAAhB,CAAD,CAAR;AAEAP,IAAAA,EAAE,CAAC,GAAGY,IAAJ,CAAF,CACKG,IADL,CACWC,KAAD,IAAW;AACbZ,MAAAA,SAAS,MACLS,MAAM,KAAKV,UAAU,CAACW,OAD1B,IAEIR,QAAQ,CAAC;AAAEU,QAAAA,KAAF;AAAST,QAAAA,OAAO,EAAE;AAAlB,OAAD,CAFZ;AAIA,aAAOS,KAAP;AACH,KAPL,EAQKC,KARL,CAQYC,KAAD,IAAW;AACdd,MAAAA,SAAS,MACLS,MAAM,KAAKV,UAAU,CAACW,OAD1B,IAEIR,QAAQ,CAAC;AAAEY,QAAAA,KAAF;AAASX,QAAAA,OAAO,EAAE;AAAlB,OAAD,CAFZ;AAIA,aAAOW,KAAP;AACH,KAdL;AAeH,GApBuB;AAqBxB;AACAjB,EAAAA;AACA;AAvBwB,GAA5B;AA0BA,SAAO,CAACI,KAAD,EAAQM,QAAR,EAAkBH,WAAlB,CAAP;AACH","sourcesContent":["import { useCallback, useState, useRef } from 'react';\nimport useMountedChecker from './useMountedChecker';\n\n/**\n * React hook that returns state and a callback for an async function or a function that returns a promise. Just like an async version of useCallback.\n * @param {*} fn - Async function\n * @param {Array} deps\n * @param {boolean} [loadingState=false]\n */\nexport default function useAsyncCallback(fn, deps, loadingState) {\n    const lastCallId = useRef(0);\n    const isMounted = useMountedChecker();\n    const [state, setState] = useState({\n        loading: loadingState ? true : false,\n    });\n    const applyChange = useCallback(\n        (payload) => {\n            setState((prevState) => ({ ...prevState, ...payload }));\n        },\n        [setState]\n    );\n\n    const callback = useCallback(\n        (...args) => {\n            const callId = ++lastCallId.current;\n            setState((prevState) => ({ ...prevState, loading: true }));\n\n            fn(...args)\n                .then((value) => {\n                    isMounted() &&\n                        callId === lastCallId.current &&\n                        setState({ value, loading: false });\n\n                    return value;\n                })\n                .catch((error) => {\n                    isMounted() &&\n                        callId === lastCallId.current &&\n                        setState({ error, loading: false });\n\n                    return error;\n                });\n        },\n        /* eslint-disable react-hooks/exhaustive-deps */\n        deps\n        /* eslint-enable react-hooks/exhaustive-deps */\n    );\n\n    return [state, callback, applyChange];\n}\n"]}