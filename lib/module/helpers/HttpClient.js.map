{"version":3,"sources":["HttpClient.js"],"names":["request","join","AllowedMethods","get","post","put","del","delete","upload","download","resToPath","parts","Array","isArray","map","res","encodeURIComponent","setUploadBody","req","body","options","formData","entries","forEach","k","v","field","attach","fileField","HttpClient","constructor","endpoint","resource","query","_send","data","file","method","path","setRequestBody","toLowerCase","httpMethod","Error","url","startsWith","_createRequest","onSending","send","onProgress","on","result","text","onSent","error","response","onReponseError","onOtherError"],"mappings":"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","sourcesContent":["import request from 'superagent';\nimport { join } from '../utils/url';\n\nconst AllowedMethods = {\n    get: 'get',\n    post: 'post',\n    put: 'put',\n    del: 'del',\n    delete: 'del',\n    upload: 'post',\n    download: 'get',\n};\n\nfunction resToPath(parts) {\n    return parts\n        ? Array.isArray(parts)\n            ? parts.map((res) => encodeURIComponent(res)).join('/')\n            : parts\n        : '';\n}\n\nfunction setUploadBody(req, body, options) {\n    if (options && options.formData) {\n        options.formData.entries.forEach(([k, v]) => {\n            req.field(k, v);\n        });\n    }\n    req.attach(options && options.fileField ? options.fileField : 'file', body);\n}\n\n/**\n * Http client.\n * @class\n */\nexport default class HttpClient {\n    /**\n     * HttpClient constructor\n     * @param {*} endpoint - Default endpoint\n     */\n    constructor(endpoint) {\n        endpoint != null || (endpoint = '');\n        this.endpoint = endpoint;\n    }\n\n    /**\n     * Http get request.\n     * @param {string|Array} resource\n     * @param {Object} query\n     * @param {Object} options\n     * @property {string} [options.endpoint] - Override the default base endpoint\n     * @property {Function} [options.onProgress] - Report progress when waiting for response\n     */\n    async get(resource, query, options) {\n        return this._send('get', resToPath(resource), query, null, options);\n    }\n\n    /**\n     * Http post request.\n     * @param {string|Array} resource\n     * @param {Object} data\n     * @param {Object} query\n     * @param {Object} options\n     * @property {string} [options.endpoint] - Override the default base endpoint\n     * @property {Function} [options.onProgress] - Report progress when waiting for response\n     */\n    async post(resource, data, query, options) {\n        return this._send('post', resToPath(resource), query, data, options);\n    }\n\n    /**\n     * Http put request.\n     * @param {string|Array} resource\n     * @param {Object} data\n     * @param {Object} query\n     * @param {Object} options\n     * @property {string} [options.endpoint] - Override the default base endpoint\n     * @property {Function} [options.onProgress] - Report progress when waiting for response\n     */\n    async put(resource, data, query, options) {\n        return this._send('put', resToPath(resource), query, data, options);\n    }\n\n    /**\n     * Http del request.\n     * @param {string|Array} resource\n     * @param {Object} query\n     * @param {Object} options\n     * @property {string} [options.endpoint] - Override the default base endpoint\n     * @property {Function} [options.onProgress] - Report progress when waiting for response\n     */\n    async del(resource, query, options) {\n        return this._send('del', resToPath(resource), query, null, options);\n    }\n\n    /**\n     * Http upload request.\n     * @param {string|Array} resource\n     * @param {string} file\n     * @param {Object} query\n     * @param {Object} options\n     * @property {string} [options.endpoint] - Override the default base endpoint\n     * @property {Function} [options.onProgress] - Report progress when waiting for response\n     * @property {Object} [options.formData] - Form data passed while uploading\n     * @property {string} [options.fileField=\"file\"] - File field name, default as \"file\"\n     */\n    async upload(resource, file, query, options) {\n        return this._send(\n            'upload',\n            resToPath(resource),\n            query,\n            file,\n            options,\n            setUploadBody\n        );\n    }\n\n    /**\n     * Http download request.\n     * @param {string|Array} resource\n     * @param {Object} query\n     * @param {Object} options\n     * @property {string} [options.endpoint] - Override the default base endpoint\n     * @property {Function} [options.onProgress] - Report progress when waiting for response\n     */\n    async download(resource, query, options) {\n        return this._send(\n            'download',\n            resToPath(resource),\n            query,\n            null,\n            options\n        );\n    }\n\n    async _send(method, path, query, body, options, setRequestBody) {\n        method = method.toLowerCase();\n        const httpMethod = AllowedMethods[method];\n        if (!httpMethod) {\n            throw new Error('Invalid method: ' + method);\n        }\n\n        const url =\n            path.startsWith('http:') || path.startsWith('https:')\n                ? path // absolute url\n                : join(\n                      options && options.endpoint\n                          ? options.endpoint\n                          : this.endpoint,\n                      path\n                  );\n\n        const req = this._createRequest(httpMethod, url);\n\n        if (this.onSending) {\n            this.onSending(req, httpMethod, url);\n        }\n\n        if (query) {\n            req.query(query);\n        }\n\n        if (setRequestBody) {\n            setRequestBody(req);\n        } else {\n            req.send(body);\n        }\n\n        if (options && options.onProgress) {\n            req.on('progress', options.onProgress);\n        }\n\n        try {\n            const res = await req;\n            const result = res.body || res.text;\n\n            if (this.onSent) {\n                await this.onSent(url, result);\n            }\n\n            return result;\n        } catch (error) {\n            if (error.response && error.response.body) {\n                if (this.onReponseError) {\n                    return this.onReponseError(error.response.body);\n                }\n\n                throw error;\n            }\n\n            if (this.onOtherError) {\n                return this.onOtherError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    _createRequest(httpMethod, url) {\n        return request[httpMethod](url);\n    }\n}\n"]}