{"version":3,"sources":["HttpClient.js"],"names":["request","Platform","url","urlUtil","_each","mime","Runtime","AllowedMethods","get","post","put","del","delete","upload","download","resToPath","parts","Array","isArray","map","res","encodeURIComponent","join","setUploadBody","req","body","options","formData","entries","forEach","k","v","field","attach","fileField","HttpClient","constructor","endpoint","resource","query","_send","data","file","jsRuntime","uri","name","Error","fileOthers","OS","replace","type","lookup","method","path","setRequestBody","toLowerCase","httpMethod","startsWith","_createRequest","onSending","extraHeaders","headers","set","withCredentials","send","onProgress","on","result","text","onSent","error","response","onReponseError","onOtherError"],"mappings":"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","sourcesContent":["import request from 'superagent';\nimport { Platform } from 'react-native';\nimport { url as urlUtil } from '@genx/july';\nimport _each from 'lodash/each';\nimport * as mime from 'react-native-mime-types';\n\nimport Runtime from '../Runtime';\n\nconst AllowedMethods = {\n    get: 'get',\n    post: 'post',\n    put: 'put',\n    del: 'del',\n    delete: 'del',\n    upload: 'post',\n    download: 'get',\n};\n\nfunction resToPath(parts) {\n    return parts\n        ? Array.isArray(parts)\n            ? parts.map((res) => encodeURIComponent(res)).join('/')\n            : parts\n        : '';\n}\n\nfunction setUploadBody(req, body, options) {\n    if (options && options.formData) {\n        options.formData.entries.forEach(([k, v]) => {\n            req.field(k, v);\n        });\n    }\n\n    req.attach(options && options.fileField ? options.fileField : 'file', body);\n}\n\n/**\n * Http client.\n * @class\n */\nexport default class HttpClient {\n    /**\n     * HttpClient constructor\n     * @param {*} endpoint - Default endpoint\n     */\n    constructor(endpoint) {\n        endpoint != null || (endpoint = '');\n        this.endpoint = endpoint;\n    }\n\n    /**\n     * Http get request.\n     * @param {string|Array} resource\n     * @param {Object} query\n     * @param {Object} options\n     * @property {string} [options.endpoint] - Override the default base endpoint\n     * @property {Function} [options.onProgress] - Report progress when waiting for response\n     */\n    async get(resource, query, options) {\n        return this._send('get', resToPath(resource), query, null, options);\n    }\n\n    /**\n     * Http post request.\n     * @param {string|Array} resource\n     * @param {Object} data\n     * @param {Object} query\n     * @param {Object} options\n     * @property {string} [options.endpoint] - Override the default base endpoint\n     * @property {Function} [options.onProgress] - Report progress when waiting for response\n     */\n    async post(resource, data, query, options) {\n        return this._send('post', resToPath(resource), query, data, options);\n    }\n\n    /**\n     * Http put request.\n     * @param {string|Array} resource\n     * @param {Object} data\n     * @param {Object} query\n     * @param {Object} options\n     * @property {string} [options.endpoint] - Override the default base endpoint\n     * @property {Function} [options.onProgress] - Report progress when waiting for response\n     */\n    async put(resource, data, query, options) {\n        return this._send('put', resToPath(resource), query, data, options);\n    }\n\n    /**\n     * Http del request.\n     * @param {string|Array} resource\n     * @param {Object} query\n     * @param {Object} options\n     * @property {string} [options.endpoint] - Override the default base endpoint\n     * @property {Function} [options.onProgress] - Report progress when waiting for response\n     */\n    async del(resource, query, options) {\n        return this._send('del', resToPath(resource), query, null, options);\n    }\n\n    /**\n     * Http upload request.\n     * @param {string|Array} resource\n     * @param {string} file\n     * @param {Object} query\n     * @param {Object} options\n     * @property {string} [options.endpoint] - Override the default base endpoint\n     * @property {Function} [options.onProgress] - Report progress when waiting for response\n     * @property {Object} [options.formData] - Form data passed while uploading\n     * @property {string} [options.fileField=\"file\"] - File field name, default as \"file\"\n     */\n    async upload(resource, file, query, options) {\n        if (Runtime.jsRuntime === 'native') {\n            if (typeof file !== 'object' || !file.uri || !file.name) {\n                throw new Error(\n                    'File param should be an object with { uri, name } for uploading from native env.'\n                );\n            }\n\n            let { uri, ...fileOthers } = file;\n\n            if (Platform.OS === 'ios') {\n                uri = uri.replace('file://', '');\n            }\n\n            fileOthers.uri = uri;\n            if (!fileOthers.type) {\n                fileOthers.type = mime.lookup(fileOthers.name);\n            }\n\n            file = fileOthers;\n        }\n\n        return this._send(\n            'upload',\n            resToPath(resource),\n            query,\n            file,\n            options,\n            Runtime.jsRuntime === 'node' ? setUploadBody : null\n        );\n    }\n\n    /**\n     * Http download request.\n     * @param {string|Array} resource\n     * @param {Object} query\n     * @param {Object} options\n     * @property {string} [options.endpoint] - Override the default base endpoint\n     * @property {Function} [options.onProgress] - Report progress when waiting for response\n     */\n    async download(resource, query, options) {\n        return this._send(\n            'download',\n            resToPath(resource),\n            query,\n            null,\n            options\n        );\n    }\n\n    async _send(method, path, query, body, options, setRequestBody) {\n        method = method.toLowerCase();\n        const httpMethod = options?.httpMethod || AllowedMethods[method];\n        if (!httpMethod) {\n            throw new Error('Invalid method: ' + method);\n        }\n\n        const url =\n            path.startsWith('http:') ||\n            path.startsWith('https:') ||\n            !this.endpoint\n                ? path // absolute url\n                : urlUtil.join(\n                      options && options.endpoint\n                          ? options.endpoint\n                          : this.endpoint,\n                      path\n                  );\n\n        const req = this._createRequest(httpMethod, url);\n\n        if (this.onSending) {\n            this.onSending(req, httpMethod, url);\n        }\n\n        const extraHeaders = options?.headers;\n        if (extraHeaders) {\n            _each(extraHeaders, (v, k) => {\n                req.set(k, v);\n            });\n        }\n\n        if (options?.withCredentials) {\n            req.withCredentials();\n        }\n\n        if (query) {\n            req.query(query);\n        }\n\n        if (setRequestBody) {\n            setRequestBody(req, body, options);\n        } else {\n            req.send(body);\n        }\n\n        if (options && options.onProgress) {\n            req.on('progress', options.onProgress);\n        }\n\n        try {\n            const res = await req;\n            const result = res.body || res.text;\n\n            if (this.onSent) {\n                await this.onSent(url, result);\n            }\n\n            return result;\n        } catch (error) {\n            if (error.response && error.response.body) {\n                if (this.onReponseError) {\n                    return this.onReponseError(error.response.body);\n                }\n\n                throw error;\n            }\n\n            if (this.onOtherError) {\n                return this.onOtherError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    _createRequest(httpMethod, url) {\n        return request[httpMethod](url);\n    }\n}\n"]}