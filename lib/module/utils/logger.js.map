{"version":3,"sources":["logger.js"],"names":["DEBUG","VERBOSE","INFO","WARNING","ERROR","logLevel","mapLogLevels","debug","verbose","info","warning","warn","error","disable","levelText","getLogLevel","setLogLevel","level","makeLogger","logger","logInfoProducer","enabledLogLevel","args","Array","isArray","consoleLogger","console","log"],"mappings":"AAAA,OAAO,MAAMA,KAAK,GAAG,CAAd;AACP,OAAO,MAAMC,OAAO,GAAG,CAAhB;AACP,OAAO,MAAMC,IAAI,GAAG,CAAb;AACP,OAAO,MAAMC,OAAO,GAAG,CAAhB;AACP,OAAO,MAAMC,KAAK,GAAG,CAAd;AAEP,IAAIC,QAAQ,GAAGH,IAAf;AAEA,MAAMI,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAEP,KADU;AAEjBQ,EAAAA,OAAO,EAAEP,OAFQ;AAGjBQ,EAAAA,IAAI,EAAEP,IAHW;AAIjBQ,EAAAA,OAAO,EAAEP,OAJQ;AAKjBQ,EAAAA,IAAI,EAAER,OALW;AAMjBS,EAAAA,KAAK,EAAER,KANU;AAOjBS,EAAAA,OAAO,EAAET,KAAK,GAAG;AAPA,CAArB;AAUA,MAAMU,SAAS,GAAG,CACd,QADc,EAEd,OAFc,EAGd,SAHc,EAId,MAJc,EAKd,SALc,EAMd,OANc,EAOd,SAPc,CAAlB;AAUA,OAAO,MAAMC,WAAW,GAAG,MAAMV,QAA1B;AAEP,OAAO,MAAMW,WAAW,GAAIC,KAAD,IAAYZ,QAAQ,GAAGC,YAAY,CAACW,KAAD,CAAvD;AAEP,OAAO,MAAMC,UAAU,GAAIC,MAAD,IAAY,CAACF,KAAD,EAAQG,eAAR,KAA4B;AAC9D,QAAMC,eAAe,GACjBf,YAAY,CAACW,KAAD,CAAZ,IAAuBZ,QAAvB,GAAkCC,YAAY,CAACW,KAAD,CAA9C,GAAwD,CAD5D;;AAGA,MAAII,eAAJ,EAAqB;AACjB,QAAIC,IAAI,GAAGF,eAAe,EAA1B;AACAG,IAAAA,KAAK,CAACC,OAAN,CAAcF,IAAd,MAAwBA,IAAI,GAAG,CAACA,IAAD,CAA/B;AAEAH,IAAAA,MAAM,CAACE,eAAD,EAAkBC,IAAlB,CAAN;AACH;AACJ,CAVM;AAYP,OAAO,MAAMG,aAAa,GAAG,CAACR,KAAD,EAAQK,IAAR,KACzB,CAACL,KAAK,GAAGd,OAAR,GAAkBuB,OAAO,CAACd,KAA1B,GAAkCc,OAAO,CAACC,GAA3C,EACK,IAAGb,SAAS,CAACG,KAAD,CAAQ,GADzB,EAEI,GAAGK,IAFP,CADG","sourcesContent":["export const DEBUG = 1;\nexport const VERBOSE = 2;\nexport const INFO = 3;\nexport const WARNING = 4;\nexport const ERROR = 5;\n\nlet logLevel = INFO;\n\nconst mapLogLevels = {\n    debug: DEBUG,\n    verbose: VERBOSE,\n    info: INFO,\n    warning: WARNING,\n    warn: WARNING,\n    error: ERROR,\n    disable: ERROR + 1,\n};\n\nconst levelText = [\n    'uknown',\n    'debug',\n    'verbose',\n    'info',\n    'warning',\n    'error',\n    'disable',\n];\n\nexport const getLogLevel = () => logLevel;\n\nexport const setLogLevel = (level) => (logLevel = mapLogLevels[level]);\n\nexport const makeLogger = (logger) => (level, logInfoProducer) => {\n    const enabledLogLevel =\n        mapLogLevels[level] >= logLevel ? mapLogLevels[level] : 0;\n\n    if (enabledLogLevel) {\n        let args = logInfoProducer();\n        Array.isArray(args) || (args = [args]);\n\n        logger(enabledLogLevel, args);\n    }\n};\n\nexport const consoleLogger = (level, args) =>\n    (level > WARNING ? console.error : console.log)(\n        `[${levelText[level]}]`,\n        ...args\n    );\n"]}