{"version":3,"sources":["FaceRecognition.js"],"names":["ReactNativeBiometrics","checkIsAvailable_","available","biometryType","isSensorAvailable","FaceID","console","log","Biometrics","isBiometricKeyExist_","keysExist","biometricKeysExist","createKeys_","publicKey","createKeys","deleteKeys_","keysDeleted","deleteKeys","createSignature_","payload","success","signature","error","createSignature","promptMessage","defaultRecognitionProcess","onCreateKey","onVerifyKey","isAvailable","keyExist"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,yBAAlC;;AAEA,MAAMC,iBAAiB,GAAG,YAAY;AAClC,QAAM;AACFC,IAAAA,SADE;AAEFC,IAAAA;AAFE,MAGF,MAAMH,qBAAqB,CAACI,iBAAtB,EAHV;;AAIA,MAAIF,SAAS,IAAIC,YAAY,KAAKH,qBAAqB,CAACK,MAAxD,EAAgE;AAC5DC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,WAAO,IAAP;AACH,GAHD,MAGO,IAAIL,SAAS,IAAIC,YAAY,KAAKH,qBAAqB,CAACQ,UAAxD,EAAoE;AACvEF,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,WAAO,IAAP;AACH,GAHM,MAGA;AACH,WAAO,KAAP;AACH;AACJ,CAdD;;AAgBA,MAAME,oBAAoB,GAAG,YAAY;AACrC,QAAM;AAAEC,IAAAA;AAAF,MAAgB,MAAMV,qBAAqB,CAACW,kBAAtB,EAA5B;AACA,SAAOD,SAAP;AACH,CAHD;;AAKA,MAAME,WAAW,GAAG,YAAY;AAC5B,QAAM;AAAEC,IAAAA;AAAF,MAAgB,MAAMb,qBAAqB,CAACc,UAAtB,CACxB,qBADwB,CAA5B;AAGA,SAAOD,SAAP;AACH,CALD;;AAMA,MAAME,WAAW,GAAG,YAAY;AAC5B,QAAM;AAAEC,IAAAA;AAAF,MAAkB,MAAMhB,qBAAqB,CAACiB,UAAtB,EAA9B;;AACA,MAAID,WAAJ,EAAiB;AACbV,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACH,GAFD,MAEO;AACHD,IAAAA,OAAO,CAACC,GAAR,CACI,4DADJ;AAGH;AACJ,CATD;;AAWA,MAAMW,gBAAgB,GAAG,MAAOC,OAAP,IAAmB;AACxC,QAAM;AACFC,IAAAA,OADE;AAEFC,IAAAA,SAFE;AAGFC,IAAAA;AAHE,MAIF,MAAMtB,qBAAqB,CAACuB,eAAtB,CAAsC;AAC5CC,IAAAA,aAAa,EAAE,SAD6B;AAE5CL,IAAAA,OAAO,EAAEA;AAFmC,GAAtC,CAJV;;AAQA,MAAIC,OAAJ,EAAa;AACT,WAAOC,SAAP;AACH,GAFD,MAEO;AACH,WAAO,KAAP;AACH;AACJ,CAdD;;AAgBA,MAAMI,yBAAyB,GAAG,OAC9BC,WAD8B,EAE9BC,WAF8B,EAG9BR,OAAO,GAAG,MAHoB,KAI7B;AACD,MAAI;AACA,UAAMS,WAAW,GAAG,MAAM3B,iBAAiB,EAA3C;;AACA,QAAI2B,WAAJ,EAAiB;AACb,YAAMC,QAAQ,GAAG,MAAMpB,oBAAoB,EAA3C;;AACA,UAAI,CAACoB,QAAL,EAAe;AACX,cAAMhB,SAAS,GAAG,MAAMD,WAAW,EAAnC;AACA,cAAMc,WAAW,CAACb,SAAD,CAAjB;AACH;;AACD,YAAMQ,SAAS,GAAG,MAAMH,gBAAgB,CAACC,OAAD,CAAxC;;AACA,UAAIE,SAAS,KAAK,KAAlB,EAAyB;AACrB,cAAMM,WAAW,CAACN,SAAD,CAAjB;AACH;AACJ;AACJ,GAbD,CAaE,OAAOC,KAAP,EAAc;AACZhB,IAAAA,OAAO,CAACC,GAAR,CAAYe,KAAZ;AACH;AACJ,CArBD;;AAuBA,SACIrB,iBADJ,EAEIQ,oBAFJ,EAGIS,gBAHJ,EAIIN,WAJJ,EAKIG,WALJ,EAMIU,yBANJ","sourcesContent":["import ReactNativeBiometrics from 'react-native-biometrics';\n\nconst checkIsAvailable_ = async () => {\n    const {\n        available,\n        biometryType,\n    } = await ReactNativeBiometrics.isSensorAvailable();\n    if (available && biometryType === ReactNativeBiometrics.FaceID) {\n        console.log('FaceID is supported');\n        return true;\n    } else if (available && biometryType === ReactNativeBiometrics.Biometrics) {\n        console.log('Biometrics is supported');\n        return true;\n    } else {\n        return false;\n    }\n};\n\nconst isBiometricKeyExist_ = async () => {\n    const { keysExist } = await ReactNativeBiometrics.biometricKeysExist();\n    return keysExist;\n};\n\nconst createKeys_ = async () => {\n    const { publicKey } = await ReactNativeBiometrics.createKeys(\n        'Confirm fingerprint'\n    );\n    return publicKey;\n};\nconst deleteKeys_ = async () => {\n    const { keysDeleted } = await ReactNativeBiometrics.deleteKeys();\n    if (keysDeleted) {\n        console.log('Successful deletion');\n    } else {\n        console.log(\n            'Unsuccessful deletion because there were no keys to delete'\n        );\n    }\n};\n\nconst createSignature_ = async (payload) => {\n    const {\n        success,\n        signature,\n        error,\n    } = await ReactNativeBiometrics.createSignature({\n        promptMessage: 'Sign in',\n        payload: payload,\n    });\n    if (success) {\n        return signature;\n    } else {\n        return false;\n    }\n};\n\nconst defaultRecognitionProcess = async (\n    onCreateKey,\n    onVerifyKey,\n    payload = 'salt'\n) => {\n    try {\n        const isAvailable = await checkIsAvailable_();\n        if (isAvailable) {\n            const keyExist = await isBiometricKeyExist_();\n            if (!keyExist) {\n                const publicKey = await createKeys_();\n                await onCreateKey(publicKey);\n            }\n            const signature = await createSignature_(payload);\n            if (signature !== false) {\n                await onVerifyKey(signature);\n            }\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport {\n    checkIsAvailable_,\n    isBiometricKeyExist_,\n    createSignature_,\n    createKeys_,\n    deleteKeys_,\n    defaultRecognitionProcess,\n};\n"]}