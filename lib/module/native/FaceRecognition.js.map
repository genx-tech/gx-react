{"version":3,"sources":["FaceRecognition.js"],"names":["ReactNativeBiometrics","checkIsAvailable_","available","biometryType","isSensorAvailable","FaceID","console","log","Biometrics","isBiometricKeyExist_","keysExist","biometricKeysExist","createKeys_","publicKey","createKeys","deleteKeys_","keysDeleted","deleteKeys","createSignature_","payload","success","signature","error","createSignature","promptMessage","defaultRecognitionProcess","onCreateKey","onVerifyKey","isAvailable","keyExist"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,yBAAlC;;AAGA,MAAMC,iBAAiB,GAAG,YAAW;AACjC,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA8B,MAAMH,qBAAqB,CAACI,iBAAtB,EAA1C;;AACA,MAAIF,SAAS,IAAIC,YAAY,KAAKH,qBAAqB,CAACK,MAAxD,EAAgE;AAC5DC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,WAAO,IAAP;AACH,GAHD,MAIK,IAAIL,SAAS,IAAIC,YAAY,KAAKH,qBAAqB,CAACQ,UAAxD,EAAoE;AACrEF,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,WAAO,IAAP;AACH,GAHI,MAGA;AACD,WAAO,KAAP;AACH;AACJ,CAZD;;AAcA,MAAME,oBAAoB,GAAG,YAAW;AACrC,QAAM;AAACC,IAAAA;AAAD,MAAc,MAAMV,qBAAqB,CAACW,kBAAtB,EAA1B;AACA,SAAOD,SAAP;AACF,CAHD;;AAKA,MAAME,WAAW,GAAG,YAAU;AAC1B,QAAM;AAAEC,IAAAA;AAAF,MAAgB,MAAMb,qBAAqB,CAACc,UAAtB,CAAiC,qBAAjC,CAA5B;AACA,SAAOD,SAAP;AACH,CAHD;;AAIA,MAAME,WAAW,GAAG,YAAU;AAC1B,QAAM;AAAEC,IAAAA;AAAF,MAAkB,MAAMhB,qBAAqB,CAACiB,UAAtB,EAA9B;;AACA,MAAID,WAAJ,EAAiB;AACbV,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACH,GAFD,MAEO;AACHD,IAAAA,OAAO,CAACC,GAAR,CAAY,4DAAZ;AACH;AACJ,CAPD;;AASA,MAAMW,gBAAgB,GAAG,MAAOC,OAAP,IAAiB;AACtC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,SAAX;AAAsBC,IAAAA;AAAtB,MAAgC,MAAMtB,qBAAqB,CAACuB,eAAtB,CAAsC;AAC9EC,IAAAA,aAAa,EAAE,SAD+D;AAE9EL,IAAAA,OAAO,EAACA;AAFsE,GAAtC,CAA5C;;AAIA,MAAIC,OAAJ,EAAa;AACT,WAAOC,SAAP;AACH,GAFD,MAEK;AACD,WAAO,KAAP;AACH;AACJ,CAVD;;AAYA,MAAMI,yBAAyB,GAAG,OAAOC,WAAP,EAAmBC,WAAnB,EAA+BR,OAAO,GAAC,MAAvC,KAAgD;AAC9E,MAAI;AACA,UAAMS,WAAW,GAAG,MAAM3B,iBAAiB,EAA3C;;AACA,QAAG2B,WAAH,EAAe;AACX,YAAMC,QAAQ,GAAG,MAAMpB,oBAAoB,EAA3C;;AACA,UAAG,CAACoB,QAAJ,EAAa;AACV,cAAMhB,SAAS,GAAG,MAAMD,WAAW,EAAnC;AACA,cAAMc,WAAW,CAACb,SAAD,CAAjB;AACF;;AACD,YAAMQ,SAAS,GAAG,MAAMH,gBAAgB,CAACC,OAAD,CAAxC;;AACA,UAAGE,SAAS,KAAG,KAAf,EAAqB;AACjB,cAAMM,WAAW,CAACN,SAAD,CAAjB;AACH;AACJ;AACJ,GAbD,CAaE,OAAOC,KAAP,EAAc;AACZhB,IAAAA,OAAO,CAACC,GAAR,CAAYe,KAAZ;AACH;AAEJ,CAlBD;;AAoBA,SAASrB,iBAAT,EAA4BQ,oBAA5B,EAAkDS,gBAAlD,EAAoEN,WAApE,EAAiFG,WAAjF,EAA8FU,yBAA9F","sourcesContent":["import ReactNativeBiometrics from 'react-native-biometrics'\n\n\nconst checkIsAvailable_ = async () =>{\n    const { available, biometryType } = await ReactNativeBiometrics.isSensorAvailable()\n    if (available && biometryType === ReactNativeBiometrics.FaceID) {\n        console.log('FaceID is supported')\n        return true\n    }\n    else if (available && biometryType === ReactNativeBiometrics.Biometrics) {\n        console.log('Biometrics is supported')\n        return true\n    }else{\n        return false\n    }\n}\n\nconst isBiometricKeyExist_ = async () =>{\n   const {keysExist} = await ReactNativeBiometrics.biometricKeysExist()\n   return keysExist\n}\n\nconst createKeys_ = async ()=>{\n    const { publicKey } = await ReactNativeBiometrics.createKeys('Confirm fingerprint')\n    return publicKey\n}\nconst deleteKeys_ = async ()=>{\n    const { keysDeleted } = await ReactNativeBiometrics.deleteKeys()\n    if (keysDeleted) {\n        console.log('Successful deletion')\n    } else {\n        console.log('Unsuccessful deletion because there were no keys to delete')\n    }\n}\n\nconst createSignature_ = async (payload)=>{\n    const { success, signature, error } = await ReactNativeBiometrics.createSignature({\n        promptMessage: 'Sign in',\n        payload:payload\n    })\n    if (success) {\n        return signature\n    }else{\n        return false\n    }\n}\n\nconst defaultRecognitionProcess = async (onCreateKey,onVerifyKey,payload='salt')=>{\n    try {\n        const isAvailable = await checkIsAvailable_()\n        if(isAvailable){\n            const keyExist = await isBiometricKeyExist_()\n            if(!keyExist){\n               const publicKey = await createKeys_()\n               await onCreateKey(publicKey)\n            }\n            const signature = await createSignature_(payload)\n            if(signature!==false){\n                await onVerifyKey(signature)\n            }\n        }\n    } catch (error) {\n        console.log(error)\n    }\n\n}\n\nexport { checkIsAvailable_, isBiometricKeyExist_, createSignature_, createKeys_, deleteKeys_ ,defaultRecognitionProcess }"]}