{"version":3,"sources":["StaticRoutes.js"],"names":["React","useMemo","enableScreens","createNativeStackNavigator","createStackNavigator","createBottomTabNavigator","Runtime","stackNavigatorCreator","useNativeStack","renderScreens","Screen","screens","map","node","i","nested","Navigator","mapOfNavigator","nestedOptions","screenProps","props","BottomTabNavigator","Tab","mapOfIcon","reduce","r","name","icon","screenOptions","route","tabBarIcon","StackNavigator","Stack","bottomTab","stack","StaticRoutes","type"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,0BAAT,QAA2C,mCAA3C;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,SAASC,wBAAT,QAAyC,+BAAzC;AAEA,OAAOC,OAAP,MAAoB,YAApB;AAEA,IAAIC,qBAAJ;;AAEA,IAAID,OAAO,CAACE,cAAZ,EAA4B;AACxBN,EAAAA,aAAa;AACbK,EAAAA,qBAAqB,GAAGJ,0BAAxB;AACH,CAHD,MAGO;AACHI,EAAAA,qBAAqB,GAAGH,oBAAxB;AACH;;AAED,MAAMK,aAAa,GAAG,CAACC,MAAD,EAASC,OAAT,KAClBA,OAAO,CAACC,GAAR,CAAY,CAACC,IAAD,EAAOC,CAAP,KAAa;AACrB,MAAID,IAAI,CAACE,MAAT,EAAiB;AACb,UAAMC,SAAS,GAAGC,cAAc,CAACJ,IAAI,CAACE,MAAN,CAAhC;AACA,UAAM;AAAEG,MAAAA,aAAF;AAAiB,SAAGC;AAApB,QAAoCN,IAA1C;AACA,wBACI,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAEC;AAAb,OAAoBK,WAApB,GACMC,KAAD,iBAAW,oBAAC,SAAD,eAAeA,KAAf,EAA0BF,aAA1B,EADhB,CADJ;AAKH;;AAED,sBAAO,oBAAC,MAAD;AAAQ,IAAA,GAAG,EAAEJ;AAAb,KAAoBD,IAApB,EAAP;AACH,CAZD,CADJ;;AAeA,MAAMQ,kBAAkB,GAAG,CAAC;AAAEV,EAAAA,OAAF;AAAW,KAAGS;AAAd,CAAD,KAA2B;AAClD,QAAME,GAAG,GAAGrB,OAAO,CAAC,MAAMI,wBAAwB,EAA/B,EAAmC,EAAnC,CAAnB;AAEA,QAAMkB,SAAS,GAAGZ,OAAO,CAACa,MAAR,CAAe,CAACC,CAAD,EAAIZ,IAAJ,KAAa;AAC1CY,IAAAA,CAAC,CAACZ,IAAI,CAACa,IAAN,CAAD,GAAeb,IAAI,CAACc,IAApB;AACA,WAAOF,CAAP;AACH,GAHiB,EAGf,EAHe,CAAlB;;AAKA,QAAMG,aAAa,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,MAAgB;AAClCC,IAAAA,UAAU,EAAEP,SAAS,CAACM,KAAK,CAACH,IAAP;AADa,GAAhB,CAAtB;;AAIA,sBACI,oBAAC,GAAD,CAAK,SAAL;AAAe,IAAA,aAAa,EAAEE;AAA9B,KAAiDR,KAAjD,GACKX,aAAa,CAACa,GAAG,CAACZ,MAAL,EAAaC,OAAb,CADlB,CADJ;AAKH,CAjBD;;AAmBA,MAAMoB,cAAc,GAAG,CAAC;AAAEpB,EAAAA,OAAF;AAAW,KAAGS;AAAd,CAAD,KAA2B;AAC9C,QAAMY,KAAK,GAAG/B,OAAO,CAAC,MAAMM,qBAAqB,EAA5B,EAAgC,EAAhC,CAArB;AAEA,sBACI,oBAAC,KAAD,CAAO,SAAP,EAAqBa,KAArB,EACKX,aAAa,CAACuB,KAAK,CAACtB,MAAP,EAAeC,OAAf,CADlB,CADJ;AAKH,CARD;;AAUA,MAAMM,cAAc,GAAG;AACnBgB,EAAAA,SAAS,EAAEZ,kBADQ;AAEnBa,EAAAA,KAAK,EAAEH;AAFY,CAAvB;;AAKA,MAAMI,YAAY,GAAG,CAAC;AAAEC,EAAAA,IAAI,GAAG,OAAT;AAAkB,KAAGhB;AAArB,CAAD,KAAkC;AACnD,QAAMJ,SAAS,GAAGC,cAAc,CAACmB,IAAD,CAAhC;AACA,sBAAO,oBAAC,SAAD,EAAehB,KAAf,CAAP;AACH,CAHD;;AAKA,eAAee,YAAf","sourcesContent":["import React, { useMemo } from 'react';\nimport { enableScreens } from 'react-native-screens';\nimport { createNativeStackNavigator } from 'react-native-screens/native-stack';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nimport Runtime from '../Runtime';\n\nlet stackNavigatorCreator;\n\nif (Runtime.useNativeStack) {\n    enableScreens();\n    stackNavigatorCreator = createNativeStackNavigator;\n} else {\n    stackNavigatorCreator = createStackNavigator;\n}\n\nconst renderScreens = (Screen, screens) =>\n    screens.map((node, i) => {\n        if (node.nested) {\n            const Navigator = mapOfNavigator[node.nested];\n            const { nestedOptions, ...screenProps } = node;\n            return (\n                <Screen key={i} {...screenProps}>\n                    {(props) => <Navigator {...props} {...nestedOptions} />}\n                </Screen>\n            );\n        }\n\n        return <Screen key={i} {...node} />;\n    });\n\nconst BottomTabNavigator = ({ screens, ...props }) => {\n    const Tab = useMemo(() => createBottomTabNavigator(), []);\n\n    const mapOfIcon = screens.reduce((r, node) => {\n        r[node.name] = node.icon;\n        return r;\n    }, {});\n\n    const screenOptions = ({ route }) => ({\n        tabBarIcon: mapOfIcon[route.name],\n    });\n\n    return (\n        <Tab.Navigator screenOptions={screenOptions} {...props}>\n            {renderScreens(Tab.Screen, screens)}\n        </Tab.Navigator>\n    );\n};\n\nconst StackNavigator = ({ screens, ...props }) => {\n    const Stack = useMemo(() => stackNavigatorCreator(), []);\n\n    return (\n        <Stack.Navigator {...props}>\n            {renderScreens(Stack.Screen, screens)}\n        </Stack.Navigator>\n    );\n};\n\nconst mapOfNavigator = {\n    bottomTab: BottomTabNavigator,\n    stack: StackNavigator,\n};\n\nconst StaticRoutes = ({ type = 'stack', ...props }) => {\n    const Navigator = mapOfNavigator[type];\n    return <Navigator {...props} />;\n};\n\nexport default StaticRoutes;\n"]}