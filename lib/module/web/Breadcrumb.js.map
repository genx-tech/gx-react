{"version":3,"sources":["Breadcrumb.js"],"names":["React","Link","useLocation","Breadcrumb","buildQuery","BreadcrumbBar","formatPathText","customLinks","props","location","pathSnippets","pathname","split","filter","i","linkPath","maxNodeIndex","length","breadcrumbItems","concat","map","node","label","linkUrl","customLink","link","params"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,WAAf,QAAkC,kBAAlC;AACA,SAASC,UAAT,QAA2B,MAA3B;AAEA,OAAOC,UAAP,MAAuB,qBAAvB;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,cAAF;AAAkBC,EAAAA,WAAlB;AAA+B,KAAGC;AAAlC,CAAD,KAA+C;AACjE,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AAEA,QAAMQ,YAAY,GAAGD,QAAQ,CAACE,QAAT,CAAkBC,KAAlB,CAAwB,GAAxB,EAA6BC,MAA7B,CAAqCC,CAAD,IAAOA,CAA3C,CAArB;AAEA,MAAIC,QAAQ,GAAG,EAAf;AACA,QAAMC,YAAY,GAAGN,YAAY,CAACO,MAAb,GAAsB,CAA3C;AAEA,QAAMC,eAAe,GAAG,cACpB,oBAAC,UAAD,CAAY,IAAZ;AAAiB,IAAA,GAAG,EAAE;AAAtB,kBACI,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC;AAAT,KAAcZ,cAAc,CAAC,GAAD,CAA5B,CADJ,CADoB,EAItBa,MAJsB,CAKpBT,YAAY,CAACU,GAAb,CAAiB,CAACC,IAAD,EAAOP,CAAP,KAAa;AAC1BC,IAAAA,QAAQ,IAAI,MAAMM,IAAlB;AAEA,QAAIC,KAAK,GAAGhB,cAAc,CAACS,QAAD,CAA1B;AAEA,QAAIQ,OAAO,GAAGR,QAAd;;AAEA,QAAID,CAAC,GAAGE,YAAJ,IAAoBT,WAAxB,EAAqC;AACjC,YAAMiB,UAAU,GAAGjB,WAAW,CAACQ,QAAD,CAA9B;;AACA,UAAIS,UAAJ,EAAgB;AACZ,YAAIA,UAAU,CAACC,IAAf,EAAqB;AACjBF,UAAAA,OAAO,GAAGC,UAAU,CAACC,IAArB;AACH;;AAED,YAAID,UAAU,CAACE,MAAf,EAAuB;AACnBH,UAAAA,OAAO,IAAI,MAAMnB,UAAU,CAACoB,UAAU,CAACE,MAAZ,CAA3B;AACH;AACJ;AACJ;;AAED,wBACI,oBAAC,UAAD,CAAY,IAAZ;AAAiB,MAAA,GAAG,EAAEX;AAAtB,OACKD,CAAC,KAAKJ,YAAY,CAACO,MAAb,GAAsB,CAA5B,GACGK,KADH,gBAGG,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAEC;AAAV,OAAoBD,KAApB,CAJR,CADJ;AASH,GA7BD,CALoB,CAAxB;AAqCA,sBAAO,oBAAC,UAAD,EAAgBd,KAAhB,EAAwBU,eAAxB,CAAP;AACH,CA9CD;;AAgDA,eAAeb,aAAf","sourcesContent":["import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Breadcrumb } from 'antd';\n\nimport buildQuery from '../utils/buildQuery';\n\nconst BreadcrumbBar = ({ formatPathText, customLinks, ...props }) => {\n    const location = useLocation();\n\n    const pathSnippets = location.pathname.split('/').filter((i) => i);\n\n    let linkPath = '';\n    const maxNodeIndex = pathSnippets.length - 1;\n\n    const breadcrumbItems = [\n        <Breadcrumb.Item key={'/'}>\n            <Link to=\"/\">{formatPathText('/')}</Link>\n        </Breadcrumb.Item>,\n    ].concat(\n        pathSnippets.map((node, i) => {\n            linkPath += '/' + node;\n\n            let label = formatPathText(linkPath);\n\n            let linkUrl = linkPath;\n\n            if (i < maxNodeIndex && customLinks) {\n                const customLink = customLinks[linkPath];\n                if (customLink) {\n                    if (customLink.link) {\n                        linkUrl = customLink.link;\n                    }\n\n                    if (customLink.params) {\n                        linkUrl += '?' + buildQuery(customLink.params);\n                    }\n                }\n            }\n\n            return (\n                <Breadcrumb.Item key={linkPath}>\n                    {i === pathSnippets.length - 1 ? (\n                        label\n                    ) : (\n                        <Link to={linkUrl}>{label}</Link>\n                    )}\n                </Breadcrumb.Item>\n            );\n        })\n    );\n\n    return <Breadcrumb {...props}>{breadcrumbItems}</Breadcrumb>;\n};\n\nexport default BreadcrumbBar;\n"]}