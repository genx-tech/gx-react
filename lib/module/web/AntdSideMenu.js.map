{"version":3,"sources":["AntdSideMenu.js"],"names":["React","useMemo","useLocation","NavLink","Menu","renderIt","locationPathToNodes","SubMenu","menuItem","path","icon","menuProps","exact","formatPathText","text","inner","makeMenuItems","routes","nodePathes","map","showInMenu","subRoutes","SideMenu","sitemap","props","location","menuItems","allPossibleNodes","pathname","nodes","filter","link","i","length","slice"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport { useLocation, NavLink } from 'react-router-dom';\nimport { Menu } from 'antd';\n\nimport renderIt from '../hoc/renderIt';\nimport locationPathToNodes from '../utils/locationPathToNodes';\n\nconst { SubMenu } = Menu;\n\nconst menuItem = (path, icon, menuProps, exact, formatPathText) => {\n    const text = formatPathText(path);\n\n    const inner = (\n        <>\n            <span>{text}</span>\n        </>\n    );\n\n    return (\n        <Menu.Item key={path} icon={renderIt(icon)} title={text} {...menuProps}>\n            <NavLink to={path} exact={exact}>\n                {inner}\n            </NavLink>\n        </Menu.Item>\n    );\n};\n\nconst makeMenuItems = (routes, formatPathText) => {\n    const nodePathes = {};\n\n    return [\n        routes.map(\n            ({ path, icon, showInMenu, subRoutes, menuProps, exact }) => {\n                if (!showInMenu) {\n                    return false;\n                }\n\n                nodePathes[path] = exact;\n\n                if (subRoutes) {\n                    return (\n                        <SubMenu\n                            key={path}\n                            icon={renderIt(icon)}\n                            title={<span>{formatPathText(path)}</span>}\n                            {...menuProps}\n                        >\n                            {makeMenuItems(subRoutes, formatPathText)}\n                        </SubMenu>\n                    );\n                }\n\n                return menuItem(path, icon, menuProps, exact, formatPathText);\n            }\n        ),\n        nodePathes,\n    ];\n};\n\nconst SideMenu = ({ sitemap, ...props }) => {\n    const location = useLocation();\n    const [menuItems, nodePathes] = useMemo(\n        () => makeMenuItems(sitemap, formatPathText),\n        [sitemap, formatPathText]\n    );\n    const allPossibleNodes = locationPathToNodes(location.pathname);\n\n    const nodes = allPossibleNodes.filter((link, i) => {\n        if (link in nodePathes) {\n            return !nodePathes[link] || i === 0;\n        }\n\n        return false;\n    });\n\n    return (\n        <Menu\n            defaultSelectedKeys={nodes}\n            defaultOpenKeys={nodes.length > 1 ? nodes.slice(1) : nodes}\n            {...props}\n        >\n            {menuItems}\n        </Menu>\n    );\n};\n\nexport default SideMenu;\n"]}