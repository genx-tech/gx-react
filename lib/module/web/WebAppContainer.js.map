{"version":3,"sources":["WebAppContainer.js"],"names":["React","useMemo","I18nProvider","AppContext","setupProviders","WebAppContainer","locale","localeLoader","iconFamilies","children","elWrapped"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AACA,SAASC,UAAT,EAAqBC,cAArB,QAA2C,YAA3C;;AAEA,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,YAAV;AAAwBC,EAAAA,YAAxB;AAAsCC,EAAAA;AAAtC,CAAD,KAAsD;AAC1E,QAAMC,SAAS,GAAGT,OAAO,CAAC,MAAMG,cAAc,CAACK,QAAD,CAArB,EAAiC,CAACA,QAAD,CAAjC,CAAzB;AAEA,sBACI,oBAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE;AAAED,MAAAA;AAAF;AAA5B,kBACI,oBAAC,YAAD;AAAc,IAAA,MAAM,EAAEF,MAAtB;AAA8B,IAAA,MAAM,EAAEC;AAAtC,KACKG,SADL,CADJ,CADJ;AAOH,CAVD;;AAYA,eAAeL,eAAf","sourcesContent":["import React, { useMemo } from 'react';\nimport I18nProvider from '../i18n/I18nProvider';\nimport { AppContext, setupProviders } from '../Runtime';\n\nconst WebAppContainer = ({ locale, localeLoader, iconFamilies, children }) => {\n    const elWrapped = useMemo(() => setupProviders(children), [children]);\n\n    return (\n        <AppContext.Provider value={{ iconFamilies }}>\n            <I18nProvider locale={locale} loader={localeLoader}>\n                {elWrapped}\n            </I18nProvider>\n        </AppContext.Provider>\n    );\n};\n\nexport default WebAppContainer;\n"]}