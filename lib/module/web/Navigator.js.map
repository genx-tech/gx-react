{"version":3,"sources":["Navigator.js"],"names":["React","useEffect","useRef","Routes","Route","useLocation","Navigate","RegistryComponent","Navigator","_registry","name","layout","routes","initialPath","path","hasIndex","elRoutes","map","node","redirectTo","component","RootNavigator","onLocationChange","props","isInitial","location","current"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,WAAxB,EAAqCC,QAArC,QAAqD,kBAArD;AACA,SAASC,iBAAT,QAAkC,aAAlC;;AAEA,MAAMC,SAAS,GAAG,CAAC;AACfC,EAAAA,SADe;AAEfC,EAAAA,IAFe;AAGfC,EAAAA,MAHe;AAIfC,EAAAA,MAJe;AAKfC,EAAAA,WALe;AAMfC,EAAAA,IAAI,GAAG;AANQ,CAAD,KAOZ;AACF,MAAIC,QAAQ,GAAG,KAAf;AAEA,QAAMC,QAAQ,GAAGJ,MAAM,CAACK,GAAP,CAAYC,IAAD,IAAU;AAClC,QAAIA,IAAI,CAACJ,IAAL,KAAc,GAAlB,EAAuB;AACnBC,MAAAA,QAAQ,GAAG,IAAX;AACH;;AAED,QAAIG,IAAI,CAACN,MAAT,EAAiB;AACb,0BACI,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAEH,SAAtB;AAAiC,QAAA,GAAG,EAAES,IAAI,CAACJ;AAA3C,SAAqDI,IAArD,EADJ;AAGH;;AAED,wBACI,oBAAC,KAAD;AACI,MAAA,GAAG,EAAEA,IAAI,CAACJ,IADd;AAEI,MAAA,IAAI,EAAEI,IAAI,CAACJ,IAFf;AAGI,MAAA,OAAO,EACHI,IAAI,CAACC,UAAL,gBACI,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAED,IAAI,CAACC;AAAnB,QADJ,gBAGI,oBAAC,iBAAD;AACI,QAAA,KAAK,EAAED,IAAI,CAACR,IAAL,IAAaQ,IAAI,CAACE,SAD7B;AAEI,QAAA,SAAS,EAAEX;AAFf;AAPZ,MADJ;AAgBH,GA3BgB,CAAjB;AA6BA,SAAOE,MAAM,gBACT,oBAAC,KAAD;AACI,IAAA,IAAI,EAAEG,IADV;AAEI,IAAA,OAAO,eACH,oBAAC,iBAAD;AACI,MAAA,KAAK,EAAEJ,IAAI,IAAIC,MADnB;AAEI,MAAA,SAAS,EAAEF;AAFf;AAHR,KASKO,QATL,EAUK,CAACD,QAAD,IAAaF,WAAb,iBACG,oBAAC,KAAD;AACI,IAAA,IAAI,EAAC,GADT;AAEI,IAAA,OAAO,eAAE,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAEA,WAAd;AAA2B,MAAA,OAAO;AAAlC;AAFb,IAXR,CADS,gBAmBT,0CAAGG,QAAH,CAnBJ;AAqBH,CA5DD;;AA8DA,OAAO,MAAMK,aAAa,GAAG,CAAC;AAAEC,EAAAA,gBAAF;AAAoB,KAAGC;AAAvB,CAAD,KAAoC;AAC7D,QAAMC,SAAS,GAAGtB,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMuB,QAAQ,GAAGpB,WAAW,EAA5B;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACZqB,IAAAA,gBAAgB,IAAIA,gBAAgB,CAACG,QAAD,EAAWD,SAAS,CAACE,OAArB,CAApC;;AACA,QAAIF,SAAS,CAACE,OAAd,EAAuB;AACnBF,MAAAA,SAAS,CAACE,OAAV,GAAoB,KAApB;AACH;AACJ,GALQ,EAKN,CAACD,QAAD,EAAWH,gBAAX,CALM,CAAT;AAOA,sBACI,oBAAC,MAAD,qBACI,oBAAC,SAAD,EAAeC,KAAf,CADJ,CADJ;AAKH,CAhBM;AAkBP,eAAef,SAAf","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Routes, Route, useLocation, Navigate } from 'react-router-dom';\nimport { RegistryComponent } from '@genx/react';\n\nconst Navigator = ({\n    _registry,\n    name,\n    layout,\n    routes,\n    initialPath,\n    path = '/',\n}) => {\n    let hasIndex = false;\n\n    const elRoutes = routes.map((node) => {\n        if (node.path === '/') {\n            hasIndex = true;\n        }\n\n        if (node.routes) {\n            return (\n                <Navigator _registry={_registry} key={node.path} {...node} />\n            );\n        }\n\n        return (\n            <Route\n                key={node.path}\n                path={node.path}\n                element={\n                    node.redirectTo ? (\n                        <Navigate to={node.redirectTo} />\n                    ) : (\n                        <RegistryComponent\n                            _name={node.name || node.component}\n                            _registry={_registry}\n                        />\n                    )\n                }\n            />\n        );\n    });\n\n    return layout ? (\n        <Route\n            path={path}\n            element={\n                <RegistryComponent\n                    _name={name || layout}\n                    _registry={_registry}\n                />\n            }\n        >\n            {elRoutes}\n            {!hasIndex && initialPath && (\n                <Route\n                    path=\"/\"\n                    element={<Navigate to={initialPath} replace />}\n                />\n            )}\n        </Route>\n    ) : (\n        <>{elRoutes}</>\n    );\n};\n\nexport const RootNavigator = ({ onLocationChange, ...props }) => {\n    const isInitial = useRef(true);\n    const location = useLocation();\n\n    useEffect(() => {\n        onLocationChange && onLocationChange(location, isInitial.current);\n        if (isInitial.current) {\n            isInitial.current = false;\n        }\n    }, [location, onLocationChange]);\n\n    return (\n        <Routes>\n            <Navigator {...props} />\n        </Routes>\n    );\n};\n\nexport default Navigator;\n"]}