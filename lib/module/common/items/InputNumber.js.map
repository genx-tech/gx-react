{"version":3,"sources":["InputNumber.js"],"names":["React","useState","useMemo","View","Block","Input","withGalio","Text","JVInput","meta","inline","key","styles","store","name","inputProps","rules","value","setValue","getValue","inputLabel","placeholder","inputWidth","style","width","addon","addonAfter","text","textInputProps","readOnly","editable","onChangeText","paddingRight","paddingLeft","paddingTop","alignContent"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,QAAyC,OAAzC;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,SAAvB,EAAkCC,IAAlC,QAA8C,iBAA9C;AAEA,eAAe,SAASC,OAAT,CAAiB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,MAAR;AAAgBC,EAAAA,GAAhB;AAAqBC,EAAAA,MAArB;AAA6BC,EAAAA;AAA7B,CAAjB,EAAuD;AAClE,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,UAAR;AAAoBC,IAAAA;AAApB,MAA8BP,IAApC;AAEA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC,MAAMY,KAAK,CAACM,QAAN,CAAeL,IAAf,CAAP,CAAlC;AAEA,QAAMM,UAAU,GAAGL,UAAU,CAACM,WAA9B;AACA,QAAMC,UAAU,GAAGP,UAAU,CAACQ,KAAX,CAAiBC,KAApC;AACA,QAAMC,KAAK,GAAGV,UAAU,CAACW,UAAX,GAAwBX,UAAU,CAACW,UAAX,CAAsBC,IAA9C,GAAqD,IAAnE;AAEA,QAAMC,cAAc,GAAG1B,OAAO,CAC1B,MACIW,KAAK,CAACgB,QAAN,GACM;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GADN,GAEM;AACIC,IAAAA,YAAY,EAAGd,KAAD,IAAW;AACrBJ,MAAAA,KAAK,CAACK,QAAN,CAAeJ,IAAf,EAAqBG,KAArB;AACAC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACH;AAJL,GAJgB,EAU1B,CAACJ,KAAD,CAV0B,CAA9B;AAaA,sBACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEmB,MAAAA,YAAY,EAAE,EAAhB;AAAoBC,MAAAA,WAAW,EAAE;AAAjC,KAAb;AAAoD,IAAA,GAAG,EAAEtB;AAAzD,kBACI,oBAAC,KAAD;AAAO,IAAA,GAAG,MAAV;AAAW,IAAA,MAAM,EAAE;AAAnB,kBACI,oBAAC,KAAD;AAAO,IAAA,YAAY,EAAEM;AAArB,KAAgCW,cAAhC,EADJ,eAEI,oBAAC,IAAD;AACI,IAAA,KAAK,EAAE;AACHK,MAAAA,WAAW,EAAE,CADV;AAEHC,MAAAA,UAAU,EAAE,CAFT;AAGHC,MAAAA,YAAY,EAAE;AAHX,KADX;AAMI,IAAA,IAAI,EAAE;AANV,KAQKV,KARL,CAFJ,CADJ,CADJ;AAiBH","sourcesContent":["import React, { useState, useMemo } from 'react';\nimport { View } from 'react-native';\nimport { Block, Input, withGalio, Text } from 'galio-framework';\n\nexport default function JVInput({ meta, inline, key, styles, store }) {\n    const { name, inputProps, rules } = meta;\n\n    const [value, setValue] = useState(() => store.getValue(name));\n\n    const inputLabel = inputProps.placeholder;\n    const inputWidth = inputProps.style.width;\n    const addon = inputProps.addonAfter ? inputProps.addonAfter.text : null;\n\n    const textInputProps = useMemo(\n        () =>\n            store.readOnly\n                ? { editable: false }\n                : {\n                      onChangeText: (value) => {\n                          store.setValue(name, value);\n                          setValue(value);\n                      },\n                  },\n        [store]\n    );\n\n    return (\n        <View style={{ paddingRight: 12, paddingLeft: 12 }} key={key}>\n            <Block row middle={true}>\n                <Input defaultValue={value} {...textInputProps} />\n                <Text\n                    style={{\n                        paddingLeft: 5,\n                        paddingTop: 5,\n                        alignContent: 'center',\n                    }}\n                    size={14}\n                >\n                    {addon}\n                </Text>\n            </Block>\n        </View>\n    );\n}\n"]}