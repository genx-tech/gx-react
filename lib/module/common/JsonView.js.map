{"version":3,"sources":["JsonView.js"],"names":["React","useMemo","View","buildItem","meta","value","inline","key","factory","content","mergeItem","itemResult","Array","isArray","concat","push","items","header","build","forEach","innerItem","i","footer","length","wrap","JsonView","view","jsxView","undefined"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,IAAT,QAAqB,cAArB;;AAEA,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgCC,MAAhC,EAAwCC,GAAxC,EAA6CC,OAA7C,EAAsD;AAClD,MAAIC,OAAO,GAAG,EAAd;;AAEA,WAASC,SAAT,CAAmBC,UAAnB,EAA+B;AAC3B,QAAIC,KAAK,CAACC,OAAN,CAAcF,UAAd,CAAJ,EAA+B;AAC3BF,MAAAA,OAAO,GAAGA,OAAO,CAACK,MAAR,CAAeH,UAAf,CAAV;AACH,KAFD,MAEO;AACHF,MAAAA,OAAO,CAACM,IAAR,CAAaJ,UAAb;AACH;AACJ;;AAED,MAAIP,IAAI,CAACY,KAAT,EAAgB;AACZ,QAAIZ,IAAI,CAACa,MAAT,EAAiB;AACbP,MAAAA,SAAS,CAACF,OAAO,CAACU,KAAR,CAAcd,IAAI,CAACa,MAAnB,EAA2BZ,KAA3B,EAAkC,KAAlC,EAAyC,QAAzC,CAAD,CAAT;AACH;;AAEDD,IAAAA,IAAI,CAACY,KAAL,CAAWG,OAAX,CAAmB,CAACC,SAAD,EAAYC,CAAZ,KACfX,SAAS,CAACP,SAAS,CAACiB,SAAD,EAAYf,KAAZ,EAAmBD,IAAI,CAACE,MAAxB,EAAgCe,CAAhC,EAAmCb,OAAnC,CAAV,CADb;;AAIA,QAAIJ,IAAI,CAACkB,MAAT,EAAiB;AACbZ,MAAAA,SAAS,CAACF,OAAO,CAACU,KAAR,CAAcd,IAAI,CAACkB,MAAnB,EAA2BjB,KAA3B,EAAkC,KAAlC,EAAyC,QAAzC,CAAD,CAAT;AACH;AACJ,GAZD,MAYO;AACHK,IAAAA,SAAS,CAACF,OAAO,CAACU,KAAR,CAAcd,IAAd,EAAoBC,KAApB,EAA2BC,MAA3B,CAAD,CAAT;AACH;;AAED,MAAIG,OAAO,CAACc,MAAR,KAAmB,CAAvB,EAA0B;AACtBd,IAAAA,OAAO,GAAGA,OAAO,CAAC,CAAD,CAAjB;AACH;;AAED,MAAIL,IAAI,CAACE,MAAT,EAAiB;AACb,WAAOE,OAAO,CAACgB,IAAR,CAAa,SAAb,EAAwBf,OAAxB,EAAiCF,GAAjC,CAAP;AACH;;AAED,SAAOC,OAAO,CAACgB,IAAR,CAAa,MAAb,EAAqBf,OAArB,EAA8BF,GAA9B,CAAP;AACH;;AAED,MAAMkB,QAAQ,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQrB,EAAAA,KAAR;AAAeG,EAAAA;AAAf,CAAD,KAA8B;AAC3C,QAAMmB,OAAO,GAAG1B,OAAO,CACnB,MAAME,SAAS,CAAC;AAAEa,IAAAA,KAAK,EAAEU;AAAT,GAAD,EAAkBrB,KAAlB,EAAyB,KAAzB,EAAgCuB,SAAhC,EAA2CpB,OAA3C,CADI,EAEnB,CAACkB,IAAD,EAAOrB,KAAP,EAAcG,OAAd,CAFmB,CAAvB;AAKA,sBAAO,oBAAC,IAAD,QAAOmB,OAAP,CAAP;AACH,CAPD;;AASA,eAAeF,QAAf","sourcesContent":["import React, { useMemo } from 'react';\nimport { View } from 'react-native';\n\nfunction buildItem(meta, value, inline, key, factory) {\n    let content = [];\n\n    function mergeItem(itemResult) {\n        if (Array.isArray(itemResult)) {\n            content = content.concat(itemResult);\n        } else {\n            content.push(itemResult);\n        }\n    }\n\n    if (meta.items) {\n        if (meta.header) {\n            mergeItem(factory.build(meta.header, value, false, 'header'));\n        }\n\n        meta.items.forEach((innerItem, i) =>\n            mergeItem(buildItem(innerItem, value, meta.inline, i, factory))\n        );\n\n        if (meta.footer) {\n            mergeItem(factory.build(meta.footer, value, false, 'footer'));\n        }\n    } else {\n        mergeItem(factory.build(meta, value, inline));\n    }\n\n    if (content.length === 1) {\n        content = content[0];\n    }\n\n    if (meta.inline) {\n        return factory.wrap('$inline', content, key);\n    }\n\n    return factory.wrap('$row', content, key);\n}\n\nconst JsonView = ({ view, value, factory }) => {\n    const jsxView = useMemo(\n        () => buildItem({ items: view }, value, false, undefined, factory),\n        [view, value, factory]\n    );\n\n    return <View>{jsxView}</View>;\n};\n\nexport default JsonView;\n"]}