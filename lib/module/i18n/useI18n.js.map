{"version":3,"sources":["useI18n.js"],"names":["useContext","useIntl","defineMessages","useAsyncMemo","identity","I18nContext","passThrough","useI18n","moduleName","loader","cache","intl","state","moduleKey","locale","cachedModule","messages","others","messagesWithId","key","msg","id","defaultMessage","loading","value","t","intlMessages","messageId","vars","formatMessage"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,OAAT,EAAkBC,cAAlB,QAAwC,YAAxC;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,OAAT,CAAiBC,UAAjB,EAA6B;AACxC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBV,UAAU,CAACK,WAAD,CAApC;AACA,QAAMM,IAAI,GAAGV,OAAO,EAApB;AAEA,QAAMW,KAAK,GAAGT,YAAY,CAAC,YAAY;AACnC,QAAIK,UAAJ,EAAgB;AACZ,YAAMK,SAAS,aAAMF,IAAI,CAACG,MAAX,cAAqBN,UAArB,CAAf;AAEA,YAAMO,YAAY,GAAGL,KAAK,CAACG,SAAD,CAA1B;;AACA,UAAIE,YAAJ,EAAkB;AACd,eAAOA,YAAP;AACH;;AAED,YAAM;AAAEC,QAAAA,QAAF;AAAY,WAAGC;AAAf,UAA0B,MAAMR,MAAM,CACxCE,IAAI,CAACG,MADmC,EAExCN,UAFwC,CAA5C;AAIA,YAAMU,cAAc,GAAG,EAAvB;;AAEA,WAAK,IAAIC,GAAT,IAAgBH,QAAhB,EAA0B;AACtB,cAAMI,GAAG,GAAGJ,QAAQ,CAACG,GAAD,CAApB;AACA,cAAME,EAAE,aAAMb,UAAN,cAAoBW,GAApB,CAAR;AAEAD,QAAAA,cAAc,CAACC,GAAD,CAAd,GACI,OAAOC,GAAP,KAAe,QAAf,GACM;AACIC,UAAAA,EADJ;AAEIC,UAAAA,cAAc,EAAEF;AAFpB,SADN,GAKM,EACI,GAAGA,GADP;AAEIC,UAAAA;AAFJ,SANV;AAUH;;AAED,aAAQX,KAAK,CAACG,SAAD,CAAL,GAAmB,EACvB,GAAGI,MADoB;AAEvBE,QAAAA,GAAG,EAAEN,SAFkB;AAGvBG,QAAAA,QAAQ,EAAEd,cAAc,CAACgB,cAAD;AAHD,OAA3B;AAKH;;AAED,WAAO,IAAP;AACH,GAvCyB,EAuCvB,CAACT,MAAD,EAASE,IAAI,CAACG,MAAd,EAAsBN,UAAtB,CAvCuB,CAA1B;;AAyCA,MAAII,KAAK,CAACW,OAAN,IAAiBX,KAAK,CAACY,KAAN,IAAe,IAApC,EAA0C;AACtC,WAAO,EACH,GAAGZ,KADA;AAEHD,MAAAA,IAFG;AAGHc,MAAAA,CAAC,EAAErB;AAHA,KAAP;AAKH;;AAED,QAAMsB,YAAY,GAAGd,KAAK,CAACY,KAAN,CAAYR,QAAjC;AAEA,SAAO;AACHO,IAAAA,OAAO,EAAE,KADN;AAEHZ,IAAAA,IAFG;AAGHc,IAAAA,CAAC,EAAE,CAACE,SAAD,EAAYC,IAAZ,KACCF,YAAY,CAACC,SAAD,CAAZ,IAA2B,IAA3B,GACMrB,WAAW,CAACqB,SAAD,CADjB,GAEMhB,IAAI,CAACkB,aAAL,CAAmBH,YAAY,CAACC,SAAD,CAA/B,EAA4CC,IAA5C;AANP,GAAP;AAQH","sourcesContent":["import { useContext } from 'react';\nimport { useIntl, defineMessages } from 'react-intl';\nimport useAsyncMemo from '../hooks/useAsyncMemo';\nimport { identity } from '../utils/callback';\nimport { I18nContext } from './I18nProvider';\nimport passThrough from './passThrough';\n\n/**\n * Features:\n *  Lazy locale loading, better performance for web app\n *  Messages grouped by modules\n *\n * @see {@link https://formatjs.io/guides/message-syntax/} for message syntax\n */\n\n/**\n * Returns a translator { t = (text, variables) => <translated and injected text> } of specified locale module.\n * @param {string} [moduleName]\n * @returns {Object} { loading, t }\n */\nexport default function useI18n(moduleName) {\n    const { loader, cache } = useContext(I18nContext);\n    const intl = useIntl();\n\n    const state = useAsyncMemo(async () => {\n        if (moduleName) {\n            const moduleKey = `${intl.locale}/${moduleName}`;\n\n            const cachedModule = cache[moduleKey];\n            if (cachedModule) {\n                return cachedModule;\n            }\n\n            const { messages, ...others } = await loader(\n                intl.locale,\n                moduleName\n            );\n            const messagesWithId = {};\n\n            for (let key in messages) {\n                const msg = messages[key];\n                const id = `${moduleName}.${key}`;\n\n                messagesWithId[key] =\n                    typeof msg === 'string'\n                        ? {\n                              id,\n                              defaultMessage: msg,\n                          }\n                        : {\n                              ...msg,\n                              id,\n                          };\n            }\n\n            return (cache[moduleKey] = {\n                ...others,\n                key: moduleKey,\n                messages: defineMessages(messagesWithId),\n            });\n        }\n\n        return null;\n    }, [loader, intl.locale, moduleName]);\n\n    if (state.loading || state.value == null) {\n        return {\n            ...state,\n            intl,\n            t: identity,\n        };\n    }\n\n    const intlMessages = state.value.messages;\n\n    return {\n        loading: false,\n        intl,\n        t: (messageId, vars) =>\n            intlMessages[messageId] == null\n                ? passThrough(messageId)\n                : intl.formatMessage(intlMessages[messageId], vars),\n    };\n}\n"]}