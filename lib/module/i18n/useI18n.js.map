{"version":3,"sources":["useI18n.js"],"names":["useContext","useIntl","defineMessages","Runtime","useAsyncMemo","identity","I18nContext","passThrough","cache","useI18n","moduleName","loader","intl","state","moduleKey","locale","cachedModule","log","messages","others","messagesWithId","key","msg","id","defaultMessage","loading","value","t","intlMessages","messageId","vars","formatMessage"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,OAAT,EAAkBC,cAAlB,QAAwC,YAAxC;AAEA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,KAAK,GAAG,EAAd;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,OAAT,CAAiBC,UAAjB,EAA6B;AACxC,QAAM;AAAEC,IAAAA;AAAF,MAAaX,UAAU,CAACM,WAAD,CAA7B;AACA,QAAMM,IAAI,GAAGX,OAAO,EAApB;AAEA,QAAMY,KAAK,GAAGT,YAAY,CAAC,YAAY;AACnC,QAAIM,UAAJ,EAAgB;AACZ,YAAMI,SAAS,aAAMF,IAAI,CAACG,MAAX,cAAqBL,UAArB,CAAf;AAEA,YAAMM,YAAY,GAAGR,KAAK,CAACM,SAAD,CAA1B;;AACA,UAAIE,YAAJ,EAAkB;AACdb,QAAAA,OAAO,CAACc,GAAR,CACI,SADJ,EAEI,mCAA2BH,SAA3B,mBAFJ;AAIA,eAAOE,YAAP;AACH;;AAED,YAAM;AAAEE,QAAAA,QAAF;AAAY,WAAGC;AAAf,UAA0B,MAAMR,MAAM,CACxCC,IAAI,CAACG,MADmC,EAExCL,UAFwC,CAA5C;AAIA,YAAMU,cAAc,GAAG,EAAvB;;AAEA,WAAK,IAAIC,GAAT,IAAgBH,QAAhB,EAA0B;AACtB,cAAMI,GAAG,GAAGJ,QAAQ,CAACG,GAAD,CAApB;AACA,cAAME,EAAE,aAAMb,UAAN,cAAoBW,GAApB,CAAR;AAEAD,QAAAA,cAAc,CAACC,GAAD,CAAd,GACI,OAAOC,GAAP,KAAe,QAAf,GACM;AACIC,UAAAA,EADJ;AAEIC,UAAAA,cAAc,EAAEF;AAFpB,SADN,GAKM,EACI,GAAGA,GADP;AAEIC,UAAAA;AAFJ,SANV;AAUH;;AAED,aAAQf,KAAK,CAACM,SAAD,CAAL,GAAmB,EACvB,GAAGK,MADoB;AAEvBE,QAAAA,GAAG,EAAEP,SAFkB;AAGvBI,QAAAA,QAAQ,EAAEhB,cAAc,CAACkB,cAAD;AAHD,OAA3B;AAKH;;AAED,WAAO,IAAP;AACH,GA3CyB,EA2CvB,CAACT,MAAD,EAASC,IAAI,CAACG,MAAd,EAAsBL,UAAtB,CA3CuB,CAA1B;;AA6CA,MAAIG,KAAK,CAACY,OAAN,IAAiBZ,KAAK,CAACa,KAAN,IAAe,IAApC,EAA0C;AACtC,WAAO,EACH,GAAGb,KADA;AAEHD,MAAAA,IAFG;AAGHe,MAAAA,CAAC,EAAEtB;AAHA,KAAP;AAKH;;AAED,QAAMuB,YAAY,GAAGf,KAAK,CAACa,KAAN,CAAYR,QAAjC;AAEA,SAAO;AACHO,IAAAA,OAAO,EAAE,KADN;AAEHb,IAAAA,IAFG;AAGHe,IAAAA,CAAC,EAAE,CAACE,SAAD,EAAYC,IAAZ,KACCF,YAAY,CAACC,SAAD,CAAZ,IAA2B,IAA3B,GACMtB,WAAW,CAACsB,SAAD,CADjB,GAEMjB,IAAI,CAACmB,aAAL,CAAmBH,YAAY,CAACC,SAAD,CAA/B,EAA4CC,IAA5C;AANP,GAAP;AAQH","sourcesContent":["import { useContext } from 'react';\nimport { useIntl, defineMessages } from 'react-intl';\n\nimport Runtime from '../Runtime';\nimport useAsyncMemo from '../hooks/useAsyncMemo';\nimport { identity } from '../utils/callback';\nimport { I18nContext } from './I18nProvider';\nimport passThrough from './passThrough';\n\n/**\n * Features:\n *  Lazy locale loading, better performance for web app\n *  Messages grouped by modules\n *\n * @see {@link https://formatjs.io/guides/message-syntax/} for message syntax\n */\n\nconst cache = {};\n\n/**\n * Returns a translator { t = (text, variables) => <translated and injected text> } of specified locale module.\n * @param {string} [moduleName]\n * @returns {Object} { loading, t }\n */\nexport default function useI18n(moduleName) {\n    const { loader } = useContext(I18nContext);\n    const intl = useIntl();\n\n    const state = useAsyncMemo(async () => {\n        if (moduleName) {\n            const moduleKey = `${intl.locale}/${moduleName}`;\n\n            const cachedModule = cache[moduleKey];\n            if (cachedModule) {\n                Runtime.log(\n                    'verbose',\n                    () => `Load locale data \"${moduleKey}\" from cache.`\n                );\n                return cachedModule;\n            }\n\n            const { messages, ...others } = await loader(\n                intl.locale,\n                moduleName\n            );\n            const messagesWithId = {};\n\n            for (let key in messages) {\n                const msg = messages[key];\n                const id = `${moduleName}.${key}`;\n\n                messagesWithId[key] =\n                    typeof msg === 'string'\n                        ? {\n                              id,\n                              defaultMessage: msg,\n                          }\n                        : {\n                              ...msg,\n                              id,\n                          };\n            }\n\n            return (cache[moduleKey] = {\n                ...others,\n                key: moduleKey,\n                messages: defineMessages(messagesWithId),\n            });\n        }\n\n        return null;\n    }, [loader, intl.locale, moduleName]);\n\n    if (state.loading || state.value == null) {\n        return {\n            ...state,\n            intl,\n            t: identity,\n        };\n    }\n\n    const intlMessages = state.value.messages;\n\n    return {\n        loading: false,\n        intl,\n        t: (messageId, vars) =>\n            intlMessages[messageId] == null\n                ? passThrough(messageId)\n                : intl.formatMessage(intlMessages[messageId], vars),\n    };\n}\n"]}