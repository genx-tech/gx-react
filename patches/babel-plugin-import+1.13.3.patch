diff --git a/node_modules/babel-plugin-import/lib/Plugin.js b/node_modules/babel-plugin-import/lib/Plugin.js
index 8f6a34e..d6a369d 100644
--- a/node_modules/babel-plugin-import/lib/Plugin.js
+++ b/node_modules/babel-plugin-import/lib/Plugin.js
@@ -1,31 +1,53 @@
-"use strict";Object.defineProperty(exports, "__esModule", {value: true});var _path = require('path');
+'use strict';
+Object.defineProperty(exports, '__esModule', { value: true });
+var _path = require('path');
 var _helpermoduleimports = require('@babel/helper-module-imports');
 function transCamel(_str, symbol) {
   const str = _str[0].toLowerCase() + _str.substr(1);
-  return str.replace(/([A-Z])/g, ($1) => `${symbol}${$1.toLowerCase()}`);
+  return str.replace(/([A-Z])/g, $1 => `${symbol}${$1.toLowerCase()}`);
 }
 function winPath(path2) {
-  return path2.replace(/\\/g, "/");
+  return path2.replace(/\\/g, '/');
 }
 function normalizeCustomName(originCustomName) {
-  if (typeof originCustomName === "string") {
+  if (typeof originCustomName === 'string') {
     const customNameExports = require(originCustomName);
-    return typeof customNameExports === "function" ? customNameExports : customNameExports.default;
+    return typeof customNameExports === 'function' ? customNameExports : customNameExports.default;
   }
   return originCustomName;
 }
- class Plugin {
-  constructor(libraryName, libraryDirectory, style, styleLibraryDirectory, customStyleName, camel2DashComponentName, camel2UnderlineComponentName, fileName, customName, transformToDefaultImport, types, index = 0) {
+class Plugin {
+  constructor(
+    libraryName,
+    prefixMatch,
+    libraryDirectory,
+    style,
+    styleLibraryDirectory,
+    customStyleName,
+    camel2DashComponentName,
+    camel2UnderlineComponentName,
+    fileName,
+    customName,
+    transformToDefaultImport,
+    memberUseNamedImport,
+    types,
+    index = 0,
+  ) {
     this.libraryName = libraryName;
-    this.libraryDirectory = typeof libraryDirectory === "undefined" ? "lib" : libraryDirectory;
-    this.camel2DashComponentName = typeof camel2DashComponentName === "undefined" ? true : camel2DashComponentName;
+    this.prefixMatch = prefixMatch == null ? false : prefixMatch;
+    this.libraryDirectory = typeof libraryDirectory === 'undefined' ? 'lib' : libraryDirectory;
+    this.camel2DashComponentName =
+      typeof camel2DashComponentName === 'undefined' ? true : camel2DashComponentName;
     this.camel2UnderlineComponentName = camel2UnderlineComponentName;
     this.style = style || false;
     this.styleLibraryDirectory = styleLibraryDirectory;
     this.customStyleName = normalizeCustomName(customStyleName);
-    this.fileName = fileName || "";
+    this.fileName = fileName || '';
     this.customName = normalizeCustomName(customName);
-    this.transformToDefaultImport = typeof transformToDefaultImport === "undefined" ? true : transformToDefaultImport;
+    this.transformToDefaultImport =
+      typeof transformToDefaultImport === 'undefined' ? true : transformToDefaultImport;
+    this.memberUseNamedImport =
+      memberUseNamedImport == null ? this.prefixMatch : memberUseNamedImport;
     this.types = types;
     this.pluginStateKey = `importPluginState${index}`;
   }
@@ -35,54 +57,101 @@ function normalizeCustomName(originCustomName) {
     }
     return state[this.pluginStateKey];
   }
-  importMethod(methodName, file, pluginState) {
+  importMethod(methodName, file, pluginState, memberParentName) {
     if (!pluginState.selectedMethods[methodName]) {
-      const {style, libraryDirectory} = this;
-      const transformedMethodName = this.camel2UnderlineComponentName ? transCamel(methodName, "_") : this.camel2DashComponentName ? transCamel(methodName, "-") : methodName;
-      const path2 = winPath(this.customName ? this.customName(transformedMethodName, file) : _path.join.call(void 0, this.libraryName, libraryDirectory, transformedMethodName, this.fileName));
-      pluginState.selectedMethods[methodName] = this.transformToDefaultImport ? _helpermoduleimports.addDefault.call(void 0, file.path, path2, {nameHint: methodName}) : _helpermoduleimports.addNamed.call(void 0, file.path, methodName, path2);
+      const { style, libraryDirectory } = this;
+      let transformedMethodName = this.camel2UnderlineComponentName
+        ? transCamel(methodName, '_')
+        : this.camel2DashComponentName
+        ? transCamel(methodName, '-')
+        : methodName;
+      const libSuffix =
+        pluginState.libraryPathMapping[
+          memberParentName ? `${memberParentName}.${methodName}` : methodName
+        ];
+      if (libSuffix) {
+        if (memberParentName && this.memberUseNamedImport) {
+          transformedMethodName = libSuffix;
+        } else {
+          transformedMethodName = _path.join.call(void 0, libSuffix, transformedMethodName);
+        }
+      }
+      const path2 = winPath(
+        this.customName
+          ? this.customName(transformedMethodName, file)
+          : _path.join.call(
+              void 0,
+              this.libraryName,
+              libraryDirectory,
+              transformedMethodName,
+              this.fileName,
+            ),
+      );
+      const useDefaultImport =
+        this.transformToDefaultImport && (!memberParentName || !this.memberUseNamedImport);
+      pluginState.selectedMethods[methodName] = useDefaultImport
+        ? _helpermoduleimports.addDefault.call(void 0, file.path, path2, { nameHint: methodName })
+        : _helpermoduleimports.addNamed.call(void 0, file.path, methodName, path2);
+      pluginState.libraryTranspiledMark[path2] = true;
       if (this.customStyleName) {
         const stylePath = winPath(this.customStyleName(transformedMethodName));
         _helpermoduleimports.addSideEffect.call(void 0, file.path, `${stylePath}`);
       } else if (this.styleLibraryDirectory) {
-        const stylePath = winPath(_path.join.call(void 0, this.libraryName, this.styleLibraryDirectory, transformedMethodName, this.fileName));
+        const stylePath = winPath(
+          _path.join.call(
+            void 0,
+            this.libraryName,
+            this.styleLibraryDirectory,
+            transformedMethodName,
+            this.fileName,
+          ),
+        );
         _helpermoduleimports.addSideEffect.call(void 0, file.path, `${stylePath}`);
       } else if (style === true) {
         _helpermoduleimports.addSideEffect.call(void 0, file.path, `${path2}/style`);
-      } else if (style === "css") {
+      } else if (style === 'css') {
         _helpermoduleimports.addSideEffect.call(void 0, file.path, `${path2}/style/css`);
-      } else if (typeof style === "function") {
+      } else if (typeof style === 'function') {
         const stylePath = style(path2, file);
         if (stylePath) {
           _helpermoduleimports.addSideEffect.call(void 0, file.path, stylePath);
         }
       }
     }
-    return {...pluginState.selectedMethods[methodName]};
+    return { ...pluginState.selectedMethods[methodName] };
   }
   buildExpressionHandler(node, props, path2, state) {
-    const file = path2 && path2.hub && path2.hub.file || state && state.file;
-    const {types} = this;
+    const file = (path2 && path2.hub && path2.hub.file) || (state && state.file);
+    const { types } = this;
     const pluginState = this.getPluginState(state);
-    props.forEach((prop) => {
-      if (!types.isIdentifier(node[prop]))
-        return;
-      if (pluginState.specified[node[prop].name] && types.isImportSpecifier(path2.scope.getBinding(node[prop].name).path)) {
+    props.forEach(prop => {
+      if (!types.isIdentifier(node[prop])) return;
+      if (
+        pluginState.specified[node[prop].name] &&
+        types.isImportSpecifier(path2.scope.getBinding(node[prop].name).path)
+      ) {
         node[prop] = this.importMethod(pluginState.specified[node[prop].name], file, pluginState);
       }
     });
   }
   buildDeclaratorHandler(node, prop, path2, state) {
-    const file = path2 && path2.hub && path2.hub.file || state && state.file;
-    const {types} = this;
+    const file = (path2 && path2.hub && path2.hub.file) || (state && state.file);
+    const { types } = this;
     const pluginState = this.getPluginState(state);
-    const checkScope = (targetNode) => pluginState.specified[targetNode.name] && path2.scope.hasBinding(targetNode.name) && path2.scope.getBinding(targetNode.name).path.type === "ImportSpecifier";
+    const checkScope = targetNode =>
+      pluginState.specified[targetNode.name] &&
+      path2.scope.hasBinding(targetNode.name) &&
+      path2.scope.getBinding(targetNode.name).path.type === 'ImportSpecifier';
     if (types.isIdentifier(node[prop]) && checkScope(node[prop])) {
       node[prop] = this.importMethod(pluginState.specified[node[prop].name], file, pluginState);
     } else if (types.isSequenceExpression(node[prop])) {
       node[prop].expressions.forEach((expressionNode, index) => {
         if (types.isIdentifier(expressionNode) && checkScope(expressionNode)) {
-          node[prop].expressions[index] = this.importMethod(pluginState.specified[expressionNode.name], file, pluginState);
+          node[prop].expressions[index] = this.importMethod(
+            pluginState.specified[expressionNode.name],
+            file,
+            pluginState,
+          );
         }
       });
     }
@@ -90,125 +159,158 @@ function normalizeCustomName(originCustomName) {
   ProgramEnter(path2, state) {
     const pluginState = this.getPluginState(state);
     pluginState.specified = Object.create(null);
+    pluginState.libraryPathMapping = Object.create(null);
+    pluginState.libraryTranspiledMark = Object.create(null);
     pluginState.libraryObjs = Object.create(null);
     pluginState.selectedMethods = Object.create(null);
     pluginState.pathsToRemove = [];
   }
   ProgramExit(path2, state) {
-    this.getPluginState(state).pathsToRemove.forEach((p) => !p.removed && p.remove());
+    this.getPluginState(state).pathsToRemove.forEach(p => !p.removed && p.remove());
   }
   ImportDeclaration(path2, state) {
-    const {node} = path2;
-    if (!node)
-      return;
-    const {value} = node.source;
-    const {libraryName} = this;
-    const {types} = this;
+    const { node } = path2;
+    if (!node) return;
+    const { value } = node.source;
+    const { libraryName } = this;
+    const libraryNamePrefix = libraryName + _path.sep;
+    const { types } = this;
     const pluginState = this.getPluginState(state);
-    if (value === libraryName) {
-      node.specifiers.forEach((spec) => {
+    if (
+      value === libraryName ||
+      (this.prefixMatch &&
+        value.startsWith(libraryNamePrefix) &&
+        !pluginState.libraryTranspiledMark[value])
+    ) {
+      node.specifiers.forEach(spec => {
         if (types.isImportSpecifier(spec)) {
           pluginState.specified[spec.local.name] = spec.imported.name;
+          if (value !== libraryName) {
+            pluginState.libraryPathMapping[spec.imported.name] = value.substr(
+              libraryName.length + 1,
+            );
+          }
         } else {
           pluginState.libraryObjs[spec.local.name] = true;
+          if (value !== libraryName) {
+            if (!pluginState.libraryPathMapping[spec.local.name]) {
+              pluginState.libraryPathMapping[spec.local.name] = value.substr(
+                libraryName.length + 1,
+              );
+            }
+          }
         }
       });
       pluginState.pathsToRemove.push(path2);
     }
   }
   CallExpression(path2, state) {
-    const {node} = path2;
-    const file = path2 && path2.hub && path2.hub.file || state && state.file;
-    const {name} = node.callee;
-    const {types} = this;
+    const { node } = path2;
+    const file = (path2 && path2.hub && path2.hub.file) || (state && state.file);
+    const { name } = node.callee;
+    const { types } = this;
     const pluginState = this.getPluginState(state);
     if (types.isIdentifier(node.callee)) {
       if (pluginState.specified[name]) {
         node.callee = this.importMethod(pluginState.specified[name], file, pluginState);
       }
     }
-    node.arguments = node.arguments.map((arg) => {
-      const {name: argName} = arg;
-      if (pluginState.specified[argName] && path2.scope.hasBinding(argName) && path2.scope.getBinding(argName).path.type === "ImportSpecifier") {
+    node.arguments = node.arguments.map(arg => {
+      const { name: argName } = arg;
+      if (
+        pluginState.specified[argName] &&
+        path2.scope.hasBinding(argName) &&
+        path2.scope.getBinding(argName).path.type === 'ImportSpecifier'
+      ) {
         return this.importMethod(pluginState.specified[argName], file, pluginState);
       }
       return arg;
     });
   }
   MemberExpression(path2, state) {
-    const {node} = path2;
-    const file = path2 && path2.hub && path2.hub.file || state && state.file;
+    const { node } = path2;
+    const file = (path2 && path2.hub && path2.hub.file) || (state && state.file);
     const pluginState = this.getPluginState(state);
-    if (!node.object || !node.object.name)
-      return;
+    if (!node.object || !node.object.name) return;
     if (pluginState.libraryObjs[node.object.name]) {
-      path2.replaceWith(this.importMethod(node.property.name, file, pluginState));
-    } else if (pluginState.specified[node.object.name] && path2.scope.hasBinding(node.object.name)) {
-      const {scope} = path2.scope.getBinding(node.object.name);
-      if (scope.path.parent.type === "File") {
+      const refName = `${node.object.name}.${node.property.name}`;
+      if (
+        pluginState.libraryPathMapping[node.object.name] &&
+        !pluginState.libraryPathMapping[refName]
+      ) {
+        pluginState.libraryPathMapping[refName] = pluginState.libraryPathMapping[node.object.name];
+      }
+      path2.replaceWith(this.importMethod(node.property.name, file, pluginState, node.object.name));
+    } else if (
+      pluginState.specified[node.object.name] &&
+      path2.scope.hasBinding(node.object.name)
+    ) {
+      const { scope } = path2.scope.getBinding(node.object.name);
+      if (scope.path.parent.type === 'File') {
         node.object = this.importMethod(pluginState.specified[node.object.name], file, pluginState);
       }
     }
   }
   Property(path2, state) {
-    const {node} = path2;
-    this.buildDeclaratorHandler(node, "value", path2, state);
+    const { node } = path2;
+    this.buildDeclaratorHandler(node, 'value', path2, state);
   }
   VariableDeclarator(path2, state) {
-    const {node} = path2;
-    this.buildDeclaratorHandler(node, "init", path2, state);
+    const { node } = path2;
+    this.buildDeclaratorHandler(node, 'init', path2, state);
   }
   ArrayExpression(path2, state) {
-    const {node} = path2;
+    const { node } = path2;
     const props = node.elements.map((_, index) => index);
     this.buildExpressionHandler(node.elements, props, path2, state);
   }
   LogicalExpression(path2, state) {
-    const {node} = path2;
-    this.buildExpressionHandler(node, ["left", "right"], path2, state);
+    const { node } = path2;
+    this.buildExpressionHandler(node, ['left', 'right'], path2, state);
   }
   ConditionalExpression(path2, state) {
-    const {node} = path2;
-    this.buildExpressionHandler(node, ["test", "consequent", "alternate"], path2, state);
+    const { node } = path2;
+    this.buildExpressionHandler(node, ['test', 'consequent', 'alternate'], path2, state);
   }
   IfStatement(path2, state) {
-    const {node} = path2;
-    this.buildExpressionHandler(node, ["test"], path2, state);
-    this.buildExpressionHandler(node.test, ["left", "right"], path2, state);
+    const { node } = path2;
+    this.buildExpressionHandler(node, ['test'], path2, state);
+    this.buildExpressionHandler(node.test, ['left', 'right'], path2, state);
   }
   ExpressionStatement(path2, state) {
-    const {node} = path2;
-    const {types} = this;
+    const { node } = path2;
+    const { types } = this;
     if (types.isAssignmentExpression(node.expression)) {
-      this.buildExpressionHandler(node.expression, ["right"], path2, state);
+      this.buildExpressionHandler(node.expression, ['right'], path2, state);
     }
   }
   ReturnStatement(path2, state) {
-    const {node} = path2;
-    this.buildExpressionHandler(node, ["argument"], path2, state);
+    const { node } = path2;
+    this.buildExpressionHandler(node, ['argument'], path2, state);
   }
   ExportDefaultDeclaration(path2, state) {
-    const {node} = path2;
-    this.buildExpressionHandler(node, ["declaration"], path2, state);
+    const { node } = path2;
+    this.buildExpressionHandler(node, ['declaration'], path2, state);
   }
   BinaryExpression(path2, state) {
-    const {node} = path2;
-    this.buildExpressionHandler(node, ["left", "right"], path2, state);
+    const { node } = path2;
+    this.buildExpressionHandler(node, ['left', 'right'], path2, state);
   }
   NewExpression(path2, state) {
-    const {node} = path2;
-    this.buildExpressionHandler(node, ["callee", "arguments"], path2, state);
+    const { node } = path2;
+    this.buildExpressionHandler(node, ['callee', 'arguments'], path2, state);
   }
   SwitchStatement(path2, state) {
-    const {node} = path2;
-    this.buildExpressionHandler(node, ["discriminant"], path2, state);
+    const { node } = path2;
+    this.buildExpressionHandler(node, ['discriminant'], path2, state);
   }
   SwitchCase(path2, state) {
-    const {node} = path2;
-    this.buildExpressionHandler(node, ["test"], path2, state);
+    const { node } = path2;
+    this.buildExpressionHandler(node, ['test'], path2, state);
   }
   ClassDeclaration(path2, state) {
-    const {node} = path2;
-    this.buildExpressionHandler(node, ["superClass"], path2, state);
+    const { node } = path2;
+    this.buildExpressionHandler(node, ['superClass'], path2, state);
   }
-} exports.default = Plugin;
+}
+exports.default = Plugin;
diff --git a/node_modules/babel-plugin-import/lib/index.js b/node_modules/babel-plugin-import/lib/index.js
index 219203a..094aeba 100644
--- a/node_modules/babel-plugin-import/lib/index.js
+++ b/node_modules/babel-plugin-import/lib/index.js
@@ -1,6 +1,13 @@
-"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }var _assert = require('assert'); var _assert2 = _interopRequireDefault(_assert);
-var _Plugin = require('./Plugin'); var _Plugin2 = _interopRequireDefault(_Plugin);
-exports. default = function({types}) {
+'use strict';
+Object.defineProperty(exports, '__esModule', { value: true });
+function _interopRequireDefault(obj) {
+  return obj && obj.__esModule ? obj : { default: obj };
+}
+var _assert = require('assert');
+var _assert2 = _interopRequireDefault(_assert);
+var _Plugin = require('./Plugin');
+var _Plugin2 = _interopRequireDefault(_Plugin);
+exports.default = function ({ types }) {
   let plugins = null;
   global.__clearBabelAntdPlugin = () => {
     plugins = null;
@@ -13,63 +20,99 @@ exports. default = function({types}) {
     }
   }
   const Program = {
-    enter(path, {opts = {}}) {
+    enter(path, { opts = {} }) {
       if (!plugins) {
         if (Array.isArray(opts)) {
-          plugins = opts.map(({
-            libraryName,
-            libraryDirectory,
-            style,
-            styleLibraryDirectory,
-            customStyleName,
-            camel2DashComponentName,
-            camel2UnderlineComponentName,
-            fileName,
-            customName,
-            transformToDefaultImport
-          }, index) => {
-            _assert2.default.call(void 0, libraryName, "libraryName should be provided");
-            return new (0, _Plugin2.default)(libraryName, libraryDirectory, style, styleLibraryDirectory, customStyleName, camel2DashComponentName, camel2UnderlineComponentName, fileName, customName, transformToDefaultImport, types, index);
-          });
+          plugins = opts.map(
+            (
+              {
+                libraryName,
+                prefixMatch,
+                libraryDirectory,
+                style,
+                styleLibraryDirectory,
+                customStyleName,
+                camel2DashComponentName,
+                camel2UnderlineComponentName,
+                fileName,
+                customName,
+                transformToDefaultImport,
+                memberUseNamedImport,
+              },
+              index,
+            ) => {
+              _assert2.default.call(void 0, libraryName, 'libraryName should be provided');
+              return new (0, _Plugin2.default)(
+                libraryName,
+                prefixMatch,
+                libraryDirectory,
+                style,
+                styleLibraryDirectory,
+                customStyleName,
+                camel2DashComponentName,
+                camel2UnderlineComponentName,
+                fileName,
+                customName,
+                transformToDefaultImport,
+                memberUseNamedImport,
+                types,
+                index,
+              );
+            },
+          );
         } else {
-          _assert2.default.call(void 0, opts.libraryName, "libraryName should be provided");
+          _assert2.default.call(void 0, opts.libraryName, 'libraryName should be provided');
           plugins = [
-            new (0, _Plugin2.default)(opts.libraryName, opts.libraryDirectory, opts.style, opts.styleLibraryDirectory, opts.customStyleName, opts.camel2DashComponentName, opts.camel2UnderlineComponentName, opts.fileName, opts.customName, opts.transformToDefaultImport, types)
+            new (0, _Plugin2.default)(
+              opts.libraryName,
+              opts.prefixMatch,
+              opts.libraryDirectory,
+              opts.style,
+              opts.styleLibraryDirectory,
+              opts.customStyleName,
+              opts.camel2DashComponentName,
+              opts.camel2UnderlineComponentName,
+              opts.fileName,
+              opts.customName,
+              opts.transformToDefaultImport,
+              opts.memberUseNamedImport,
+              types,
+            ),
           ];
         }
       }
-      applyInstance("ProgramEnter", arguments, this);
+      applyInstance('ProgramEnter', arguments, this);
     },
     exit() {
-      applyInstance("ProgramExit", arguments, this);
-    }
+      applyInstance('ProgramExit', arguments, this);
+    },
   };
   const methods = [
-    "ImportDeclaration",
-    "CallExpression",
-    "MemberExpression",
-    "Property",
-    "VariableDeclarator",
-    "ArrayExpression",
-    "LogicalExpression",
-    "ConditionalExpression",
-    "IfStatement",
-    "ExpressionStatement",
-    "ReturnStatement",
-    "ExportDefaultDeclaration",
-    "BinaryExpression",
-    "NewExpression",
-    "ClassDeclaration",
-    "SwitchStatement",
-    "SwitchCase"
+    'ImportDeclaration',
+    'CallExpression',
+    'MemberExpression',
+    'Property',
+    'VariableDeclarator',
+    'ArrayExpression',
+    'LogicalExpression',
+    'ConditionalExpression',
+    'IfStatement',
+    'ExpressionStatement',
+    'ReturnStatement',
+    'ExportDefaultDeclaration',
+    'BinaryExpression',
+    'NewExpression',
+    'ClassDeclaration',
+    'SwitchStatement',
+    'SwitchCase',
   ];
   const ret = {
-    visitor: {Program}
+    visitor: { Program },
   };
   for (const method of methods) {
-    ret.visitor[method] = function() {
+    ret.visitor[method] = function () {
       applyInstance(method, arguments, ret.visitor);
     };
   }
   return ret;
-}
+};
