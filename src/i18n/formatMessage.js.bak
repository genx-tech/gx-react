function deepMergeFormatsAndSetTimeZone(f1, timeZone) {
    if (!timeZone) {
        return f1;
    }
    const mfFormats = IntlMessageFormat.formats;
    return {
        ...mfFormats,
        ...f1,
        date: deepMergeOptions(
            setTimeZoneInOptions(mfFormats.date, timeZone),
            setTimeZoneInOptions(f1.date || {}, timeZone)
        ),
        time: deepMergeOptions(
            setTimeZoneInOptions(mfFormats.time, timeZone),
            setTimeZoneInOptions(f1.time || {}, timeZone)
        ),
    };
}

/**
 * react-intl formatMessage replacement for performance.
 * @param {*} messageDescriptor
 * @param {*} values
 */

export default function formatMessage(intl, messageDescriptor, values) {
    const state = intl.formatters;
    const { id, defaultMessage } = messageDescriptor;

    const formats = deepMergeFormatsAndSetTimeZone(intl.formats, intl.timeZone);

    if (defaultMessage) {
        try {
            const formatter = state.getMessageFormat(
                defaultMessage,
                intl.locale,
                formats
            );

            return formatter.format(values);
        } catch (e) {
            onError(
                new MessageFormatError(
                    `Error formatting default message for: "${id}", rendering default message verbatim`,
                    intl.locale,
                    messageDescriptor,
                    e
                )
            );
            return typeof defaultMessage === 'string' ? defaultMessage : id;
        }
    }

    return id;
}
